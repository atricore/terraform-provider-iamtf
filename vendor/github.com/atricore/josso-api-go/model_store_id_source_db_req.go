/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.0-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// StoreIdSourceDbReq struct for StoreIdSourceDbReq
type StoreIdSourceDbReq struct {
	IdOrName *string `json:"idOrName,omitempty"`
	IdSourceDb *DbIdentitySourceDTO `json:"idSourceDb,omitempty"`
	IdSourceLdap *DbIdentitySourceDTO `json:"idSourceLdap,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StoreIdSourceDbReq StoreIdSourceDbReq

// NewStoreIdSourceDbReq instantiates a new StoreIdSourceDbReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreIdSourceDbReq() *StoreIdSourceDbReq {
	this := StoreIdSourceDbReq{}
	return &this
}

// NewStoreIdSourceDbReqWithDefaults instantiates a new StoreIdSourceDbReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreIdSourceDbReqWithDefaults() *StoreIdSourceDbReq {
	this := StoreIdSourceDbReq{}
	return &this
}

// GetIdOrName returns the IdOrName field value if set, zero value otherwise.
func (o *StoreIdSourceDbReq) GetIdOrName() string {
	if o == nil || isNil(o.IdOrName) {
		var ret string
		return ret
	}
	return *o.IdOrName
}

// GetIdOrNameOk returns a tuple with the IdOrName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreIdSourceDbReq) GetIdOrNameOk() (*string, bool) {
	if o == nil || isNil(o.IdOrName) {
    return nil, false
	}
	return o.IdOrName, true
}

// HasIdOrName returns a boolean if a field has been set.
func (o *StoreIdSourceDbReq) HasIdOrName() bool {
	if o != nil && !isNil(o.IdOrName) {
		return true
	}

	return false
}

// SetIdOrName gets a reference to the given string and assigns it to the IdOrName field.
func (o *StoreIdSourceDbReq) SetIdOrName(v string) {
	o.IdOrName = &v
}

// GetIdSourceDb returns the IdSourceDb field value if set, zero value otherwise.
func (o *StoreIdSourceDbReq) GetIdSourceDb() DbIdentitySourceDTO {
	if o == nil || isNil(o.IdSourceDb) {
		var ret DbIdentitySourceDTO
		return ret
	}
	return *o.IdSourceDb
}

// GetIdSourceDbOk returns a tuple with the IdSourceDb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreIdSourceDbReq) GetIdSourceDbOk() (*DbIdentitySourceDTO, bool) {
	if o == nil || isNil(o.IdSourceDb) {
    return nil, false
	}
	return o.IdSourceDb, true
}

// HasIdSourceDb returns a boolean if a field has been set.
func (o *StoreIdSourceDbReq) HasIdSourceDb() bool {
	if o != nil && !isNil(o.IdSourceDb) {
		return true
	}

	return false
}

// SetIdSourceDb gets a reference to the given DbIdentitySourceDTO and assigns it to the IdSourceDb field.
func (o *StoreIdSourceDbReq) SetIdSourceDb(v DbIdentitySourceDTO) {
	o.IdSourceDb = &v
}

// GetIdSourceLdap returns the IdSourceLdap field value if set, zero value otherwise.
func (o *StoreIdSourceDbReq) GetIdSourceLdap() DbIdentitySourceDTO {
	if o == nil || isNil(o.IdSourceLdap) {
		var ret DbIdentitySourceDTO
		return ret
	}
	return *o.IdSourceLdap
}

// GetIdSourceLdapOk returns a tuple with the IdSourceLdap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreIdSourceDbReq) GetIdSourceLdapOk() (*DbIdentitySourceDTO, bool) {
	if o == nil || isNil(o.IdSourceLdap) {
    return nil, false
	}
	return o.IdSourceLdap, true
}

// HasIdSourceLdap returns a boolean if a field has been set.
func (o *StoreIdSourceDbReq) HasIdSourceLdap() bool {
	if o != nil && !isNil(o.IdSourceLdap) {
		return true
	}

	return false
}

// SetIdSourceLdap gets a reference to the given DbIdentitySourceDTO and assigns it to the IdSourceLdap field.
func (o *StoreIdSourceDbReq) SetIdSourceLdap(v DbIdentitySourceDTO) {
	o.IdSourceLdap = &v
}

func (o StoreIdSourceDbReq) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IdOrName) {
		toSerialize["idOrName"] = o.IdOrName
	}
	if !isNil(o.IdSourceDb) {
		toSerialize["idSourceDb"] = o.IdSourceDb
	}
	if !isNil(o.IdSourceLdap) {
		toSerialize["idSourceLdap"] = o.IdSourceLdap
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StoreIdSourceDbReq) UnmarshalJSON(bytes []byte) (err error) {
	varStoreIdSourceDbReq := _StoreIdSourceDbReq{}

	if err = json.Unmarshal(bytes, &varStoreIdSourceDbReq); err == nil {
		*o = StoreIdSourceDbReq(varStoreIdSourceDbReq)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "idOrName")
		delete(additionalProperties, "idSourceDb")
		delete(additionalProperties, "idSourceLdap")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoreIdSourceDbReq struct {
	value *StoreIdSourceDbReq
	isSet bool
}

func (v NullableStoreIdSourceDbReq) Get() *StoreIdSourceDbReq {
	return v.value
}

func (v *NullableStoreIdSourceDbReq) Set(val *StoreIdSourceDbReq) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreIdSourceDbReq) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreIdSourceDbReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreIdSourceDbReq(val *StoreIdSourceDbReq) *NullableStoreIdSourceDbReq {
	return &NullableStoreIdSourceDbReq{value: val, isSet: true}
}

func (v NullableStoreIdSourceDbReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreIdSourceDbReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


