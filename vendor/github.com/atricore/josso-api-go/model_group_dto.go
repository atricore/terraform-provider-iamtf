/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.0-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// GroupDTO struct for GroupDTO
type GroupDTO struct {
	Description *string `json:"description,omitempty"`
	ExtraAttributes []AttributeValueDTO `json:"extraAttributes,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GroupDTO GroupDTO

// NewGroupDTO instantiates a new GroupDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupDTO() *GroupDTO {
	this := GroupDTO{}
	return &this
}

// NewGroupDTOWithDefaults instantiates a new GroupDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupDTOWithDefaults() *GroupDTO {
	this := GroupDTO{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GroupDTO) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupDTO) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GroupDTO) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GroupDTO) SetDescription(v string) {
	o.Description = &v
}

// GetExtraAttributes returns the ExtraAttributes field value if set, zero value otherwise.
func (o *GroupDTO) GetExtraAttributes() []AttributeValueDTO {
	if o == nil || isNil(o.ExtraAttributes) {
		var ret []AttributeValueDTO
		return ret
	}
	return o.ExtraAttributes
}

// GetExtraAttributesOk returns a tuple with the ExtraAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupDTO) GetExtraAttributesOk() ([]AttributeValueDTO, bool) {
	if o == nil || isNil(o.ExtraAttributes) {
    return nil, false
	}
	return o.ExtraAttributes, true
}

// HasExtraAttributes returns a boolean if a field has been set.
func (o *GroupDTO) HasExtraAttributes() bool {
	if o != nil && !isNil(o.ExtraAttributes) {
		return true
	}

	return false
}

// SetExtraAttributes gets a reference to the given []AttributeValueDTO and assigns it to the ExtraAttributes field.
func (o *GroupDTO) SetExtraAttributes(v []AttributeValueDTO) {
	o.ExtraAttributes = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GroupDTO) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupDTO) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GroupDTO) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GroupDTO) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GroupDTO) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupDTO) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GroupDTO) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GroupDTO) SetName(v string) {
	o.Name = &v
}

func (o GroupDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.ExtraAttributes) {
		toSerialize["extraAttributes"] = o.ExtraAttributes
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *GroupDTO) UnmarshalJSON(bytes []byte) (err error) {
	varGroupDTO := _GroupDTO{}

	if err = json.Unmarshal(bytes, &varGroupDTO); err == nil {
		*o = GroupDTO(varGroupDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "extraAttributes")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGroupDTO struct {
	value *GroupDTO
	isSet bool
}

func (v NullableGroupDTO) Get() *GroupDTO {
	return v.value
}

func (v *NullableGroupDTO) Set(val *GroupDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupDTO(val *GroupDTO) *NullableGroupDTO {
	return &NullableGroupDTO{value: val, isSet: true}
}

func (v NullableGroupDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


