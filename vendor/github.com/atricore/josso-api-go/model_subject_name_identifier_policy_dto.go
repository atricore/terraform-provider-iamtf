/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.1-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// SubjectNameIdentifierPolicyDTO struct for SubjectNameIdentifierPolicyDTO
type SubjectNameIdentifierPolicyDTO struct {
	DescriptionKey *string `json:"descriptionKey,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	SubjectAttribute *string `json:"subjectAttribute,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubjectNameIdentifierPolicyDTO SubjectNameIdentifierPolicyDTO

// NewSubjectNameIdentifierPolicyDTO instantiates a new SubjectNameIdentifierPolicyDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubjectNameIdentifierPolicyDTO() *SubjectNameIdentifierPolicyDTO {
	this := SubjectNameIdentifierPolicyDTO{}
	return &this
}

// NewSubjectNameIdentifierPolicyDTOWithDefaults instantiates a new SubjectNameIdentifierPolicyDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubjectNameIdentifierPolicyDTOWithDefaults() *SubjectNameIdentifierPolicyDTO {
	this := SubjectNameIdentifierPolicyDTO{}
	return &this
}

// GetDescriptionKey returns the DescriptionKey field value if set, zero value otherwise.
func (o *SubjectNameIdentifierPolicyDTO) GetDescriptionKey() string {
	if o == nil || isNil(o.DescriptionKey) {
		var ret string
		return ret
	}
	return *o.DescriptionKey
}

// GetDescriptionKeyOk returns a tuple with the DescriptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectNameIdentifierPolicyDTO) GetDescriptionKeyOk() (*string, bool) {
	if o == nil || isNil(o.DescriptionKey) {
    return nil, false
	}
	return o.DescriptionKey, true
}

// HasDescriptionKey returns a boolean if a field has been set.
func (o *SubjectNameIdentifierPolicyDTO) HasDescriptionKey() bool {
	if o != nil && !isNil(o.DescriptionKey) {
		return true
	}

	return false
}

// SetDescriptionKey gets a reference to the given string and assigns it to the DescriptionKey field.
func (o *SubjectNameIdentifierPolicyDTO) SetDescriptionKey(v string) {
	o.DescriptionKey = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubjectNameIdentifierPolicyDTO) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectNameIdentifierPolicyDTO) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubjectNameIdentifierPolicyDTO) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubjectNameIdentifierPolicyDTO) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubjectNameIdentifierPolicyDTO) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectNameIdentifierPolicyDTO) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubjectNameIdentifierPolicyDTO) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SubjectNameIdentifierPolicyDTO) SetName(v string) {
	o.Name = &v
}

// GetSubjectAttribute returns the SubjectAttribute field value if set, zero value otherwise.
func (o *SubjectNameIdentifierPolicyDTO) GetSubjectAttribute() string {
	if o == nil || isNil(o.SubjectAttribute) {
		var ret string
		return ret
	}
	return *o.SubjectAttribute
}

// GetSubjectAttributeOk returns a tuple with the SubjectAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectNameIdentifierPolicyDTO) GetSubjectAttributeOk() (*string, bool) {
	if o == nil || isNil(o.SubjectAttribute) {
    return nil, false
	}
	return o.SubjectAttribute, true
}

// HasSubjectAttribute returns a boolean if a field has been set.
func (o *SubjectNameIdentifierPolicyDTO) HasSubjectAttribute() bool {
	if o != nil && !isNil(o.SubjectAttribute) {
		return true
	}

	return false
}

// SetSubjectAttribute gets a reference to the given string and assigns it to the SubjectAttribute field.
func (o *SubjectNameIdentifierPolicyDTO) SetSubjectAttribute(v string) {
	o.SubjectAttribute = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SubjectNameIdentifierPolicyDTO) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectNameIdentifierPolicyDTO) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SubjectNameIdentifierPolicyDTO) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SubjectNameIdentifierPolicyDTO) SetType(v string) {
	o.Type = &v
}

func (o SubjectNameIdentifierPolicyDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DescriptionKey) {
		toSerialize["descriptionKey"] = o.DescriptionKey
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.SubjectAttribute) {
		toSerialize["subjectAttribute"] = o.SubjectAttribute
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SubjectNameIdentifierPolicyDTO) UnmarshalJSON(bytes []byte) (err error) {
	varSubjectNameIdentifierPolicyDTO := _SubjectNameIdentifierPolicyDTO{}

	if err = json.Unmarshal(bytes, &varSubjectNameIdentifierPolicyDTO); err == nil {
		*o = SubjectNameIdentifierPolicyDTO(varSubjectNameIdentifierPolicyDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "descriptionKey")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "subjectAttribute")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubjectNameIdentifierPolicyDTO struct {
	value *SubjectNameIdentifierPolicyDTO
	isSet bool
}

func (v NullableSubjectNameIdentifierPolicyDTO) Get() *SubjectNameIdentifierPolicyDTO {
	return v.value
}

func (v *NullableSubjectNameIdentifierPolicyDTO) Set(val *SubjectNameIdentifierPolicyDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSubjectNameIdentifierPolicyDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSubjectNameIdentifierPolicyDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubjectNameIdentifierPolicyDTO(val *SubjectNameIdentifierPolicyDTO) *NullableSubjectNameIdentifierPolicyDTO {
	return &NullableSubjectNameIdentifierPolicyDTO{value: val, isSet: true}
}

func (v NullableSubjectNameIdentifierPolicyDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubjectNameIdentifierPolicyDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


