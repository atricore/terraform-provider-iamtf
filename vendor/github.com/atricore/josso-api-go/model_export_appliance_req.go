/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.0-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// ExportApplianceReq struct for ExportApplianceReq
type ExportApplianceReq struct {
	Format *string `json:"format,omitempty"`
	IdOrName *string `json:"idOrName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExportApplianceReq ExportApplianceReq

// NewExportApplianceReq instantiates a new ExportApplianceReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportApplianceReq() *ExportApplianceReq {
	this := ExportApplianceReq{}
	return &this
}

// NewExportApplianceReqWithDefaults instantiates a new ExportApplianceReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportApplianceReqWithDefaults() *ExportApplianceReq {
	this := ExportApplianceReq{}
	return &this
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *ExportApplianceReq) GetFormat() string {
	if o == nil || isNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportApplianceReq) GetFormatOk() (*string, bool) {
	if o == nil || isNil(o.Format) {
    return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *ExportApplianceReq) HasFormat() bool {
	if o != nil && !isNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *ExportApplianceReq) SetFormat(v string) {
	o.Format = &v
}

// GetIdOrName returns the IdOrName field value if set, zero value otherwise.
func (o *ExportApplianceReq) GetIdOrName() string {
	if o == nil || isNil(o.IdOrName) {
		var ret string
		return ret
	}
	return *o.IdOrName
}

// GetIdOrNameOk returns a tuple with the IdOrName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportApplianceReq) GetIdOrNameOk() (*string, bool) {
	if o == nil || isNil(o.IdOrName) {
    return nil, false
	}
	return o.IdOrName, true
}

// HasIdOrName returns a boolean if a field has been set.
func (o *ExportApplianceReq) HasIdOrName() bool {
	if o != nil && !isNil(o.IdOrName) {
		return true
	}

	return false
}

// SetIdOrName gets a reference to the given string and assigns it to the IdOrName field.
func (o *ExportApplianceReq) SetIdOrName(v string) {
	o.IdOrName = &v
}

func (o ExportApplianceReq) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !isNil(o.IdOrName) {
		toSerialize["idOrName"] = o.IdOrName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ExportApplianceReq) UnmarshalJSON(bytes []byte) (err error) {
	varExportApplianceReq := _ExportApplianceReq{}

	if err = json.Unmarshal(bytes, &varExportApplianceReq); err == nil {
		*o = ExportApplianceReq(varExportApplianceReq)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "format")
		delete(additionalProperties, "idOrName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExportApplianceReq struct {
	value *ExportApplianceReq
	isSet bool
}

func (v NullableExportApplianceReq) Get() *ExportApplianceReq {
	return v.value
}

func (v *NullableExportApplianceReq) Set(val *ExportApplianceReq) {
	v.value = val
	v.isSet = true
}

func (v NullableExportApplianceReq) IsSet() bool {
	return v.isSet
}

func (v *NullableExportApplianceReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportApplianceReq(val *ExportApplianceReq) *NullableExportApplianceReq {
	return &NullableExportApplianceReq{value: val, isSet: true}
}

func (v NullableExportApplianceReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportApplianceReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


