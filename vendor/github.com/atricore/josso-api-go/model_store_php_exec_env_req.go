/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.0-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// StorePhpExecEnvReq struct for StorePhpExecEnvReq
type StorePhpExecEnvReq struct {
	IdOrName *string `json:"idOrName,omitempty"`
	PhpExecEnv *PHPExecutionEnvironmentDTO `json:"phpExecEnv,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorePhpExecEnvReq StorePhpExecEnvReq

// NewStorePhpExecEnvReq instantiates a new StorePhpExecEnvReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorePhpExecEnvReq() *StorePhpExecEnvReq {
	this := StorePhpExecEnvReq{}
	return &this
}

// NewStorePhpExecEnvReqWithDefaults instantiates a new StorePhpExecEnvReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorePhpExecEnvReqWithDefaults() *StorePhpExecEnvReq {
	this := StorePhpExecEnvReq{}
	return &this
}

// GetIdOrName returns the IdOrName field value if set, zero value otherwise.
func (o *StorePhpExecEnvReq) GetIdOrName() string {
	if o == nil || isNil(o.IdOrName) {
		var ret string
		return ret
	}
	return *o.IdOrName
}

// GetIdOrNameOk returns a tuple with the IdOrName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorePhpExecEnvReq) GetIdOrNameOk() (*string, bool) {
	if o == nil || isNil(o.IdOrName) {
    return nil, false
	}
	return o.IdOrName, true
}

// HasIdOrName returns a boolean if a field has been set.
func (o *StorePhpExecEnvReq) HasIdOrName() bool {
	if o != nil && !isNil(o.IdOrName) {
		return true
	}

	return false
}

// SetIdOrName gets a reference to the given string and assigns it to the IdOrName field.
func (o *StorePhpExecEnvReq) SetIdOrName(v string) {
	o.IdOrName = &v
}

// GetPhpExecEnv returns the PhpExecEnv field value if set, zero value otherwise.
func (o *StorePhpExecEnvReq) GetPhpExecEnv() PHPExecutionEnvironmentDTO {
	if o == nil || isNil(o.PhpExecEnv) {
		var ret PHPExecutionEnvironmentDTO
		return ret
	}
	return *o.PhpExecEnv
}

// GetPhpExecEnvOk returns a tuple with the PhpExecEnv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorePhpExecEnvReq) GetPhpExecEnvOk() (*PHPExecutionEnvironmentDTO, bool) {
	if o == nil || isNil(o.PhpExecEnv) {
    return nil, false
	}
	return o.PhpExecEnv, true
}

// HasPhpExecEnv returns a boolean if a field has been set.
func (o *StorePhpExecEnvReq) HasPhpExecEnv() bool {
	if o != nil && !isNil(o.PhpExecEnv) {
		return true
	}

	return false
}

// SetPhpExecEnv gets a reference to the given PHPExecutionEnvironmentDTO and assigns it to the PhpExecEnv field.
func (o *StorePhpExecEnvReq) SetPhpExecEnv(v PHPExecutionEnvironmentDTO) {
	o.PhpExecEnv = &v
}

func (o StorePhpExecEnvReq) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IdOrName) {
		toSerialize["idOrName"] = o.IdOrName
	}
	if !isNil(o.PhpExecEnv) {
		toSerialize["phpExecEnv"] = o.PhpExecEnv
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StorePhpExecEnvReq) UnmarshalJSON(bytes []byte) (err error) {
	varStorePhpExecEnvReq := _StorePhpExecEnvReq{}

	if err = json.Unmarshal(bytes, &varStorePhpExecEnvReq); err == nil {
		*o = StorePhpExecEnvReq(varStorePhpExecEnvReq)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "idOrName")
		delete(additionalProperties, "phpExecEnv")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorePhpExecEnvReq struct {
	value *StorePhpExecEnvReq
	isSet bool
}

func (v NullableStorePhpExecEnvReq) Get() *StorePhpExecEnvReq {
	return v.value
}

func (v *NullableStorePhpExecEnvReq) Set(val *StorePhpExecEnvReq) {
	v.value = val
	v.isSet = true
}

func (v NullableStorePhpExecEnvReq) IsSet() bool {
	return v.isSet
}

func (v *NullableStorePhpExecEnvReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorePhpExecEnvReq(val *StorePhpExecEnvReq) *NullableStorePhpExecEnvReq {
	return &NullableStorePhpExecEnvReq{value: val, isSet: true}
}

func (v NullableStorePhpExecEnvReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorePhpExecEnvReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


