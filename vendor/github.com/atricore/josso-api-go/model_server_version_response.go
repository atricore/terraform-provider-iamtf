/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.0-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// ServerVersionResponse struct for ServerVersionResponse
type ServerVersionResponse struct {
	Server *ServerContext `json:"server,omitempty"`
	ValidationErrors []string `json:"validationErrors,omitempty"`
	Version *string `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerVersionResponse ServerVersionResponse

// NewServerVersionResponse instantiates a new ServerVersionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerVersionResponse() *ServerVersionResponse {
	this := ServerVersionResponse{}
	return &this
}

// NewServerVersionResponseWithDefaults instantiates a new ServerVersionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerVersionResponseWithDefaults() *ServerVersionResponse {
	this := ServerVersionResponse{}
	return &this
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *ServerVersionResponse) GetServer() ServerContext {
	if o == nil || isNil(o.Server) {
		var ret ServerContext
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerVersionResponse) GetServerOk() (*ServerContext, bool) {
	if o == nil || isNil(o.Server) {
    return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *ServerVersionResponse) HasServer() bool {
	if o != nil && !isNil(o.Server) {
		return true
	}

	return false
}

// SetServer gets a reference to the given ServerContext and assigns it to the Server field.
func (o *ServerVersionResponse) SetServer(v ServerContext) {
	o.Server = &v
}

// GetValidationErrors returns the ValidationErrors field value if set, zero value otherwise.
func (o *ServerVersionResponse) GetValidationErrors() []string {
	if o == nil || isNil(o.ValidationErrors) {
		var ret []string
		return ret
	}
	return o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerVersionResponse) GetValidationErrorsOk() ([]string, bool) {
	if o == nil || isNil(o.ValidationErrors) {
    return nil, false
	}
	return o.ValidationErrors, true
}

// HasValidationErrors returns a boolean if a field has been set.
func (o *ServerVersionResponse) HasValidationErrors() bool {
	if o != nil && !isNil(o.ValidationErrors) {
		return true
	}

	return false
}

// SetValidationErrors gets a reference to the given []string and assigns it to the ValidationErrors field.
func (o *ServerVersionResponse) SetValidationErrors(v []string) {
	o.ValidationErrors = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ServerVersionResponse) GetVersion() string {
	if o == nil || isNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerVersionResponse) GetVersionOk() (*string, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ServerVersionResponse) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ServerVersionResponse) SetVersion(v string) {
	o.Version = &v
}

func (o ServerVersionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Server) {
		toSerialize["server"] = o.Server
	}
	if !isNil(o.ValidationErrors) {
		toSerialize["validationErrors"] = o.ValidationErrors
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ServerVersionResponse) UnmarshalJSON(bytes []byte) (err error) {
	varServerVersionResponse := _ServerVersionResponse{}

	if err = json.Unmarshal(bytes, &varServerVersionResponse); err == nil {
		*o = ServerVersionResponse(varServerVersionResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "server")
		delete(additionalProperties, "validationErrors")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerVersionResponse struct {
	value *ServerVersionResponse
	isSet bool
}

func (v NullableServerVersionResponse) Get() *ServerVersionResponse {
	return v.value
}

func (v *NullableServerVersionResponse) Set(val *ServerVersionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServerVersionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServerVersionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerVersionResponse(val *ServerVersionResponse) *NullableServerVersionResponse {
	return &NullableServerVersionResponse{value: val, isSet: true}
}

func (v NullableServerVersionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerVersionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


