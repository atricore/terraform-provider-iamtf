/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.1-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// DelegatedAuthenticationDTO struct for DelegatedAuthenticationDTO
type DelegatedAuthenticationDTO struct {
	AuthnService *AuthenticationServiceDTO `json:"authnService,omitempty"`
	Description *string `json:"description,omitempty"`
	ElementId *string `json:"elementId,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Idp *IdentityProviderDTO `json:"idp,omitempty"`
	Name *string `json:"name,omitempty"`
	Waypoints []PointDTO `json:"waypoints,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DelegatedAuthenticationDTO DelegatedAuthenticationDTO

// NewDelegatedAuthenticationDTO instantiates a new DelegatedAuthenticationDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelegatedAuthenticationDTO() *DelegatedAuthenticationDTO {
	this := DelegatedAuthenticationDTO{}
	return &this
}

// NewDelegatedAuthenticationDTOWithDefaults instantiates a new DelegatedAuthenticationDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelegatedAuthenticationDTOWithDefaults() *DelegatedAuthenticationDTO {
	this := DelegatedAuthenticationDTO{}
	return &this
}

// GetAuthnService returns the AuthnService field value if set, zero value otherwise.
func (o *DelegatedAuthenticationDTO) GetAuthnService() AuthenticationServiceDTO {
	if o == nil || isNil(o.AuthnService) {
		var ret AuthenticationServiceDTO
		return ret
	}
	return *o.AuthnService
}

// GetAuthnServiceOk returns a tuple with the AuthnService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegatedAuthenticationDTO) GetAuthnServiceOk() (*AuthenticationServiceDTO, bool) {
	if o == nil || isNil(o.AuthnService) {
    return nil, false
	}
	return o.AuthnService, true
}

// HasAuthnService returns a boolean if a field has been set.
func (o *DelegatedAuthenticationDTO) HasAuthnService() bool {
	if o != nil && !isNil(o.AuthnService) {
		return true
	}

	return false
}

// SetAuthnService gets a reference to the given AuthenticationServiceDTO and assigns it to the AuthnService field.
func (o *DelegatedAuthenticationDTO) SetAuthnService(v AuthenticationServiceDTO) {
	o.AuthnService = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DelegatedAuthenticationDTO) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegatedAuthenticationDTO) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DelegatedAuthenticationDTO) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DelegatedAuthenticationDTO) SetDescription(v string) {
	o.Description = &v
}

// GetElementId returns the ElementId field value if set, zero value otherwise.
func (o *DelegatedAuthenticationDTO) GetElementId() string {
	if o == nil || isNil(o.ElementId) {
		var ret string
		return ret
	}
	return *o.ElementId
}

// GetElementIdOk returns a tuple with the ElementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegatedAuthenticationDTO) GetElementIdOk() (*string, bool) {
	if o == nil || isNil(o.ElementId) {
    return nil, false
	}
	return o.ElementId, true
}

// HasElementId returns a boolean if a field has been set.
func (o *DelegatedAuthenticationDTO) HasElementId() bool {
	if o != nil && !isNil(o.ElementId) {
		return true
	}

	return false
}

// SetElementId gets a reference to the given string and assigns it to the ElementId field.
func (o *DelegatedAuthenticationDTO) SetElementId(v string) {
	o.ElementId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DelegatedAuthenticationDTO) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegatedAuthenticationDTO) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DelegatedAuthenticationDTO) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DelegatedAuthenticationDTO) SetId(v int64) {
	o.Id = &v
}

// GetIdp returns the Idp field value if set, zero value otherwise.
func (o *DelegatedAuthenticationDTO) GetIdp() IdentityProviderDTO {
	if o == nil || isNil(o.Idp) {
		var ret IdentityProviderDTO
		return ret
	}
	return *o.Idp
}

// GetIdpOk returns a tuple with the Idp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegatedAuthenticationDTO) GetIdpOk() (*IdentityProviderDTO, bool) {
	if o == nil || isNil(o.Idp) {
    return nil, false
	}
	return o.Idp, true
}

// HasIdp returns a boolean if a field has been set.
func (o *DelegatedAuthenticationDTO) HasIdp() bool {
	if o != nil && !isNil(o.Idp) {
		return true
	}

	return false
}

// SetIdp gets a reference to the given IdentityProviderDTO and assigns it to the Idp field.
func (o *DelegatedAuthenticationDTO) SetIdp(v IdentityProviderDTO) {
	o.Idp = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DelegatedAuthenticationDTO) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegatedAuthenticationDTO) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DelegatedAuthenticationDTO) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DelegatedAuthenticationDTO) SetName(v string) {
	o.Name = &v
}

// GetWaypoints returns the Waypoints field value if set, zero value otherwise.
func (o *DelegatedAuthenticationDTO) GetWaypoints() []PointDTO {
	if o == nil || isNil(o.Waypoints) {
		var ret []PointDTO
		return ret
	}
	return o.Waypoints
}

// GetWaypointsOk returns a tuple with the Waypoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegatedAuthenticationDTO) GetWaypointsOk() ([]PointDTO, bool) {
	if o == nil || isNil(o.Waypoints) {
    return nil, false
	}
	return o.Waypoints, true
}

// HasWaypoints returns a boolean if a field has been set.
func (o *DelegatedAuthenticationDTO) HasWaypoints() bool {
	if o != nil && !isNil(o.Waypoints) {
		return true
	}

	return false
}

// SetWaypoints gets a reference to the given []PointDTO and assigns it to the Waypoints field.
func (o *DelegatedAuthenticationDTO) SetWaypoints(v []PointDTO) {
	o.Waypoints = v
}

func (o DelegatedAuthenticationDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AuthnService) {
		toSerialize["authnService"] = o.AuthnService
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.ElementId) {
		toSerialize["elementId"] = o.ElementId
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Idp) {
		toSerialize["idp"] = o.Idp
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Waypoints) {
		toSerialize["waypoints"] = o.Waypoints
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DelegatedAuthenticationDTO) UnmarshalJSON(bytes []byte) (err error) {
	varDelegatedAuthenticationDTO := _DelegatedAuthenticationDTO{}

	if err = json.Unmarshal(bytes, &varDelegatedAuthenticationDTO); err == nil {
		*o = DelegatedAuthenticationDTO(varDelegatedAuthenticationDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "authnService")
		delete(additionalProperties, "description")
		delete(additionalProperties, "elementId")
		delete(additionalProperties, "id")
		delete(additionalProperties, "idp")
		delete(additionalProperties, "name")
		delete(additionalProperties, "waypoints")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDelegatedAuthenticationDTO struct {
	value *DelegatedAuthenticationDTO
	isSet bool
}

func (v NullableDelegatedAuthenticationDTO) Get() *DelegatedAuthenticationDTO {
	return v.value
}

func (v *NullableDelegatedAuthenticationDTO) Set(val *DelegatedAuthenticationDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableDelegatedAuthenticationDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableDelegatedAuthenticationDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelegatedAuthenticationDTO(val *DelegatedAuthenticationDTO) *NullableDelegatedAuthenticationDTO {
	return &NullableDelegatedAuthenticationDTO{value: val, isSet: true}
}

func (v NullableDelegatedAuthenticationDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelegatedAuthenticationDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


