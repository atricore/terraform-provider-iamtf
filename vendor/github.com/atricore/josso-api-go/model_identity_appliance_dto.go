/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.1-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// IdentityApplianceDTO struct for IdentityApplianceDTO
type IdentityApplianceDTO struct {
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	ElementId *string `json:"elementId,omitempty"`
	Id *int64 `json:"id,omitempty"`
	IdApplianceDefinition *IdentityApplianceDefinitionDTO `json:"idApplianceDefinition,omitempty"`
	IdApplianceDefinitionBin *string `json:"idApplianceDefinitionBin,omitempty"`
	IdApplianceDeployment *IdentityApplianceDeploymentDTO `json:"idApplianceDeployment,omitempty"`
	Name *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	State *string `json:"state,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityApplianceDTO IdentityApplianceDTO

// NewIdentityApplianceDTO instantiates a new IdentityApplianceDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityApplianceDTO() *IdentityApplianceDTO {
	this := IdentityApplianceDTO{}
	return &this
}

// NewIdentityApplianceDTOWithDefaults instantiates a new IdentityApplianceDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityApplianceDTOWithDefaults() *IdentityApplianceDTO {
	this := IdentityApplianceDTO{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IdentityApplianceDTO) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceDTO) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IdentityApplianceDTO) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IdentityApplianceDTO) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *IdentityApplianceDTO) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceDTO) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
    return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *IdentityApplianceDTO) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *IdentityApplianceDTO) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetElementId returns the ElementId field value if set, zero value otherwise.
func (o *IdentityApplianceDTO) GetElementId() string {
	if o == nil || isNil(o.ElementId) {
		var ret string
		return ret
	}
	return *o.ElementId
}

// GetElementIdOk returns a tuple with the ElementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceDTO) GetElementIdOk() (*string, bool) {
	if o == nil || isNil(o.ElementId) {
    return nil, false
	}
	return o.ElementId, true
}

// HasElementId returns a boolean if a field has been set.
func (o *IdentityApplianceDTO) HasElementId() bool {
	if o != nil && !isNil(o.ElementId) {
		return true
	}

	return false
}

// SetElementId gets a reference to the given string and assigns it to the ElementId field.
func (o *IdentityApplianceDTO) SetElementId(v string) {
	o.ElementId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IdentityApplianceDTO) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceDTO) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IdentityApplianceDTO) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *IdentityApplianceDTO) SetId(v int64) {
	o.Id = &v
}

// GetIdApplianceDefinition returns the IdApplianceDefinition field value if set, zero value otherwise.
func (o *IdentityApplianceDTO) GetIdApplianceDefinition() IdentityApplianceDefinitionDTO {
	if o == nil || isNil(o.IdApplianceDefinition) {
		var ret IdentityApplianceDefinitionDTO
		return ret
	}
	return *o.IdApplianceDefinition
}

// GetIdApplianceDefinitionOk returns a tuple with the IdApplianceDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceDTO) GetIdApplianceDefinitionOk() (*IdentityApplianceDefinitionDTO, bool) {
	if o == nil || isNil(o.IdApplianceDefinition) {
    return nil, false
	}
	return o.IdApplianceDefinition, true
}

// HasIdApplianceDefinition returns a boolean if a field has been set.
func (o *IdentityApplianceDTO) HasIdApplianceDefinition() bool {
	if o != nil && !isNil(o.IdApplianceDefinition) {
		return true
	}

	return false
}

// SetIdApplianceDefinition gets a reference to the given IdentityApplianceDefinitionDTO and assigns it to the IdApplianceDefinition field.
func (o *IdentityApplianceDTO) SetIdApplianceDefinition(v IdentityApplianceDefinitionDTO) {
	o.IdApplianceDefinition = &v
}

// GetIdApplianceDefinitionBin returns the IdApplianceDefinitionBin field value if set, zero value otherwise.
func (o *IdentityApplianceDTO) GetIdApplianceDefinitionBin() string {
	if o == nil || isNil(o.IdApplianceDefinitionBin) {
		var ret string
		return ret
	}
	return *o.IdApplianceDefinitionBin
}

// GetIdApplianceDefinitionBinOk returns a tuple with the IdApplianceDefinitionBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceDTO) GetIdApplianceDefinitionBinOk() (*string, bool) {
	if o == nil || isNil(o.IdApplianceDefinitionBin) {
    return nil, false
	}
	return o.IdApplianceDefinitionBin, true
}

// HasIdApplianceDefinitionBin returns a boolean if a field has been set.
func (o *IdentityApplianceDTO) HasIdApplianceDefinitionBin() bool {
	if o != nil && !isNil(o.IdApplianceDefinitionBin) {
		return true
	}

	return false
}

// SetIdApplianceDefinitionBin gets a reference to the given string and assigns it to the IdApplianceDefinitionBin field.
func (o *IdentityApplianceDTO) SetIdApplianceDefinitionBin(v string) {
	o.IdApplianceDefinitionBin = &v
}

// GetIdApplianceDeployment returns the IdApplianceDeployment field value if set, zero value otherwise.
func (o *IdentityApplianceDTO) GetIdApplianceDeployment() IdentityApplianceDeploymentDTO {
	if o == nil || isNil(o.IdApplianceDeployment) {
		var ret IdentityApplianceDeploymentDTO
		return ret
	}
	return *o.IdApplianceDeployment
}

// GetIdApplianceDeploymentOk returns a tuple with the IdApplianceDeployment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceDTO) GetIdApplianceDeploymentOk() (*IdentityApplianceDeploymentDTO, bool) {
	if o == nil || isNil(o.IdApplianceDeployment) {
    return nil, false
	}
	return o.IdApplianceDeployment, true
}

// HasIdApplianceDeployment returns a boolean if a field has been set.
func (o *IdentityApplianceDTO) HasIdApplianceDeployment() bool {
	if o != nil && !isNil(o.IdApplianceDeployment) {
		return true
	}

	return false
}

// SetIdApplianceDeployment gets a reference to the given IdentityApplianceDeploymentDTO and assigns it to the IdApplianceDeployment field.
func (o *IdentityApplianceDTO) SetIdApplianceDeployment(v IdentityApplianceDeploymentDTO) {
	o.IdApplianceDeployment = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IdentityApplianceDTO) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceDTO) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IdentityApplianceDTO) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IdentityApplianceDTO) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *IdentityApplianceDTO) GetNamespace() string {
	if o == nil || isNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceDTO) GetNamespaceOk() (*string, bool) {
	if o == nil || isNil(o.Namespace) {
    return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *IdentityApplianceDTO) HasNamespace() bool {
	if o != nil && !isNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *IdentityApplianceDTO) SetNamespace(v string) {
	o.Namespace = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *IdentityApplianceDTO) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceDTO) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
    return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *IdentityApplianceDTO) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *IdentityApplianceDTO) SetState(v string) {
	o.State = &v
}

func (o IdentityApplianceDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !isNil(o.ElementId) {
		toSerialize["elementId"] = o.ElementId
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.IdApplianceDefinition) {
		toSerialize["idApplianceDefinition"] = o.IdApplianceDefinition
	}
	if !isNil(o.IdApplianceDefinitionBin) {
		toSerialize["idApplianceDefinitionBin"] = o.IdApplianceDefinitionBin
	}
	if !isNil(o.IdApplianceDeployment) {
		toSerialize["idApplianceDeployment"] = o.IdApplianceDeployment
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IdentityApplianceDTO) UnmarshalJSON(bytes []byte) (err error) {
	varIdentityApplianceDTO := _IdentityApplianceDTO{}

	if err = json.Unmarshal(bytes, &varIdentityApplianceDTO); err == nil {
		*o = IdentityApplianceDTO(varIdentityApplianceDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "elementId")
		delete(additionalProperties, "id")
		delete(additionalProperties, "idApplianceDefinition")
		delete(additionalProperties, "idApplianceDefinitionBin")
		delete(additionalProperties, "idApplianceDeployment")
		delete(additionalProperties, "name")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityApplianceDTO struct {
	value *IdentityApplianceDTO
	isSet bool
}

func (v NullableIdentityApplianceDTO) Get() *IdentityApplianceDTO {
	return v.value
}

func (v *NullableIdentityApplianceDTO) Set(val *IdentityApplianceDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityApplianceDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityApplianceDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityApplianceDTO(val *IdentityApplianceDTO) *NullableIdentityApplianceDTO {
	return &NullableIdentityApplianceDTO{value: val, isSet: true}
}

func (v NullableIdentityApplianceDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityApplianceDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


