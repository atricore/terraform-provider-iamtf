/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.1-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// ExternalOpenIDConnectRelayingPartyDTO struct for ExternalOpenIDConnectRelayingPartyDTO
type ExternalOpenIDConnectRelayingPartyDTO struct {
	AccountLinkagePolicy *AccountLinkagePolicyDTO `json:"accountLinkagePolicy,omitempty"`
	ActiveBindings []string `json:"activeBindings,omitempty"`
	ActiveProfiles []string `json:"activeProfiles,omitempty"`
	AuthorizedURIs []string `json:"authorizedURIs,omitempty"`
	ClientAuthnMethod *string `json:"clientAuthnMethod,omitempty"`
	ClientCert *string `json:"clientCert,omitempty"`
	ClientId *string `json:"clientId,omitempty"`
	ClientSecret *string `json:"clientSecret,omitempty"`
	ClientType *string `json:"clientType,omitempty"`
	Config *ProviderConfigDTO `json:"config,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	ElementId *string `json:"elementId,omitempty"`
	EncryptionAlg *string `json:"encryptionAlg,omitempty"`
	EncryptionMethod *string `json:"encryptionMethod,omitempty"`
	FederatedConnectionsA []FederatedConnectionDTO `json:"federatedConnectionsA,omitempty"`
	FederatedConnectionsB []FederatedConnectionDTO `json:"federatedConnectionsB,omitempty"`
	Grants []string `json:"grants,omitempty"`
	Id *int64 `json:"id,omitempty"`
	IdTokenEncryptionAlg *string `json:"idTokenEncryptionAlg,omitempty"`
	IdTokenEncryptionMethod *string `json:"idTokenEncryptionMethod,omitempty"`
	IdTokenSigningAlg *string `json:"idTokenSigningAlg,omitempty"`
	IdentityAppliance *IdentityApplianceDefinitionDTO `json:"identityAppliance,omitempty"`
	IdentityLookups []IdentityLookupDTO `json:"identityLookups,omitempty"`
	IdentityMappingPolicy *IdentityMappingPolicyDTO `json:"identityMappingPolicy,omitempty"`
	IsRemote *bool `json:"isRemote,omitempty"`
	Location *LocationDTO `json:"location,omitempty"`
	Metadata *ResourceDTO `json:"metadata,omitempty"`
	Name *string `json:"name,omitempty"`
	PostLogoutRedirectionURIs []string `json:"postLogoutRedirectionURIs,omitempty"`
	Remote *bool `json:"remote,omitempty"`
	ResponseTypes []string `json:"responseTypes,omitempty"`
	Role *string `json:"role,omitempty"`
	SigningAlg *string `json:"signingAlg,omitempty"`
	X *float64 `json:"x,omitempty"`
	Y *float64 `json:"y,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExternalOpenIDConnectRelayingPartyDTO ExternalOpenIDConnectRelayingPartyDTO

// NewExternalOpenIDConnectRelayingPartyDTO instantiates a new ExternalOpenIDConnectRelayingPartyDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalOpenIDConnectRelayingPartyDTO() *ExternalOpenIDConnectRelayingPartyDTO {
	this := ExternalOpenIDConnectRelayingPartyDTO{}
	return &this
}

// NewExternalOpenIDConnectRelayingPartyDTOWithDefaults instantiates a new ExternalOpenIDConnectRelayingPartyDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalOpenIDConnectRelayingPartyDTOWithDefaults() *ExternalOpenIDConnectRelayingPartyDTO {
	this := ExternalOpenIDConnectRelayingPartyDTO{}
	return &this
}

// GetAccountLinkagePolicy returns the AccountLinkagePolicy field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetAccountLinkagePolicy() AccountLinkagePolicyDTO {
	if o == nil || isNil(o.AccountLinkagePolicy) {
		var ret AccountLinkagePolicyDTO
		return ret
	}
	return *o.AccountLinkagePolicy
}

// GetAccountLinkagePolicyOk returns a tuple with the AccountLinkagePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetAccountLinkagePolicyOk() (*AccountLinkagePolicyDTO, bool) {
	if o == nil || isNil(o.AccountLinkagePolicy) {
    return nil, false
	}
	return o.AccountLinkagePolicy, true
}

// HasAccountLinkagePolicy returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasAccountLinkagePolicy() bool {
	if o != nil && !isNil(o.AccountLinkagePolicy) {
		return true
	}

	return false
}

// SetAccountLinkagePolicy gets a reference to the given AccountLinkagePolicyDTO and assigns it to the AccountLinkagePolicy field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetAccountLinkagePolicy(v AccountLinkagePolicyDTO) {
	o.AccountLinkagePolicy = &v
}

// GetActiveBindings returns the ActiveBindings field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetActiveBindings() []string {
	if o == nil || isNil(o.ActiveBindings) {
		var ret []string
		return ret
	}
	return o.ActiveBindings
}

// GetActiveBindingsOk returns a tuple with the ActiveBindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetActiveBindingsOk() ([]string, bool) {
	if o == nil || isNil(o.ActiveBindings) {
    return nil, false
	}
	return o.ActiveBindings, true
}

// HasActiveBindings returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasActiveBindings() bool {
	if o != nil && !isNil(o.ActiveBindings) {
		return true
	}

	return false
}

// SetActiveBindings gets a reference to the given []string and assigns it to the ActiveBindings field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetActiveBindings(v []string) {
	o.ActiveBindings = v
}

// GetActiveProfiles returns the ActiveProfiles field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetActiveProfiles() []string {
	if o == nil || isNil(o.ActiveProfiles) {
		var ret []string
		return ret
	}
	return o.ActiveProfiles
}

// GetActiveProfilesOk returns a tuple with the ActiveProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetActiveProfilesOk() ([]string, bool) {
	if o == nil || isNil(o.ActiveProfiles) {
    return nil, false
	}
	return o.ActiveProfiles, true
}

// HasActiveProfiles returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasActiveProfiles() bool {
	if o != nil && !isNil(o.ActiveProfiles) {
		return true
	}

	return false
}

// SetActiveProfiles gets a reference to the given []string and assigns it to the ActiveProfiles field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetActiveProfiles(v []string) {
	o.ActiveProfiles = v
}

// GetAuthorizedURIs returns the AuthorizedURIs field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetAuthorizedURIs() []string {
	if o == nil || isNil(o.AuthorizedURIs) {
		var ret []string
		return ret
	}
	return o.AuthorizedURIs
}

// GetAuthorizedURIsOk returns a tuple with the AuthorizedURIs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetAuthorizedURIsOk() ([]string, bool) {
	if o == nil || isNil(o.AuthorizedURIs) {
    return nil, false
	}
	return o.AuthorizedURIs, true
}

// HasAuthorizedURIs returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasAuthorizedURIs() bool {
	if o != nil && !isNil(o.AuthorizedURIs) {
		return true
	}

	return false
}

// SetAuthorizedURIs gets a reference to the given []string and assigns it to the AuthorizedURIs field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetAuthorizedURIs(v []string) {
	o.AuthorizedURIs = v
}

// GetClientAuthnMethod returns the ClientAuthnMethod field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetClientAuthnMethod() string {
	if o == nil || isNil(o.ClientAuthnMethod) {
		var ret string
		return ret
	}
	return *o.ClientAuthnMethod
}

// GetClientAuthnMethodOk returns a tuple with the ClientAuthnMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetClientAuthnMethodOk() (*string, bool) {
	if o == nil || isNil(o.ClientAuthnMethod) {
    return nil, false
	}
	return o.ClientAuthnMethod, true
}

// HasClientAuthnMethod returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasClientAuthnMethod() bool {
	if o != nil && !isNil(o.ClientAuthnMethod) {
		return true
	}

	return false
}

// SetClientAuthnMethod gets a reference to the given string and assigns it to the ClientAuthnMethod field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetClientAuthnMethod(v string) {
	o.ClientAuthnMethod = &v
}

// GetClientCert returns the ClientCert field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetClientCert() string {
	if o == nil || isNil(o.ClientCert) {
		var ret string
		return ret
	}
	return *o.ClientCert
}

// GetClientCertOk returns a tuple with the ClientCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetClientCertOk() (*string, bool) {
	if o == nil || isNil(o.ClientCert) {
    return nil, false
	}
	return o.ClientCert, true
}

// HasClientCert returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasClientCert() bool {
	if o != nil && !isNil(o.ClientCert) {
		return true
	}

	return false
}

// SetClientCert gets a reference to the given string and assigns it to the ClientCert field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetClientCert(v string) {
	o.ClientCert = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetClientId() string {
	if o == nil || isNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetClientIdOk() (*string, bool) {
	if o == nil || isNil(o.ClientId) {
    return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasClientId() bool {
	if o != nil && !isNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetClientId(v string) {
	o.ClientId = &v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetClientSecret() string {
	if o == nil || isNil(o.ClientSecret) {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetClientSecretOk() (*string, bool) {
	if o == nil || isNil(o.ClientSecret) {
    return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasClientSecret() bool {
	if o != nil && !isNil(o.ClientSecret) {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetClientSecret(v string) {
	o.ClientSecret = &v
}

// GetClientType returns the ClientType field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetClientType() string {
	if o == nil || isNil(o.ClientType) {
		var ret string
		return ret
	}
	return *o.ClientType
}

// GetClientTypeOk returns a tuple with the ClientType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetClientTypeOk() (*string, bool) {
	if o == nil || isNil(o.ClientType) {
    return nil, false
	}
	return o.ClientType, true
}

// HasClientType returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasClientType() bool {
	if o != nil && !isNil(o.ClientType) {
		return true
	}

	return false
}

// SetClientType gets a reference to the given string and assigns it to the ClientType field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetClientType(v string) {
	o.ClientType = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetConfig() ProviderConfigDTO {
	if o == nil || isNil(o.Config) {
		var ret ProviderConfigDTO
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetConfigOk() (*ProviderConfigDTO, bool) {
	if o == nil || isNil(o.Config) {
    return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasConfig() bool {
	if o != nil && !isNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given ProviderConfigDTO and assigns it to the Config field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetConfig(v ProviderConfigDTO) {
	o.Config = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
    return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetElementId returns the ElementId field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetElementId() string {
	if o == nil || isNil(o.ElementId) {
		var ret string
		return ret
	}
	return *o.ElementId
}

// GetElementIdOk returns a tuple with the ElementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetElementIdOk() (*string, bool) {
	if o == nil || isNil(o.ElementId) {
    return nil, false
	}
	return o.ElementId, true
}

// HasElementId returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasElementId() bool {
	if o != nil && !isNil(o.ElementId) {
		return true
	}

	return false
}

// SetElementId gets a reference to the given string and assigns it to the ElementId field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetElementId(v string) {
	o.ElementId = &v
}

// GetEncryptionAlg returns the EncryptionAlg field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetEncryptionAlg() string {
	if o == nil || isNil(o.EncryptionAlg) {
		var ret string
		return ret
	}
	return *o.EncryptionAlg
}

// GetEncryptionAlgOk returns a tuple with the EncryptionAlg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetEncryptionAlgOk() (*string, bool) {
	if o == nil || isNil(o.EncryptionAlg) {
    return nil, false
	}
	return o.EncryptionAlg, true
}

// HasEncryptionAlg returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasEncryptionAlg() bool {
	if o != nil && !isNil(o.EncryptionAlg) {
		return true
	}

	return false
}

// SetEncryptionAlg gets a reference to the given string and assigns it to the EncryptionAlg field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetEncryptionAlg(v string) {
	o.EncryptionAlg = &v
}

// GetEncryptionMethod returns the EncryptionMethod field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetEncryptionMethod() string {
	if o == nil || isNil(o.EncryptionMethod) {
		var ret string
		return ret
	}
	return *o.EncryptionMethod
}

// GetEncryptionMethodOk returns a tuple with the EncryptionMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetEncryptionMethodOk() (*string, bool) {
	if o == nil || isNil(o.EncryptionMethod) {
    return nil, false
	}
	return o.EncryptionMethod, true
}

// HasEncryptionMethod returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasEncryptionMethod() bool {
	if o != nil && !isNil(o.EncryptionMethod) {
		return true
	}

	return false
}

// SetEncryptionMethod gets a reference to the given string and assigns it to the EncryptionMethod field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetEncryptionMethod(v string) {
	o.EncryptionMethod = &v
}

// GetFederatedConnectionsA returns the FederatedConnectionsA field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetFederatedConnectionsA() []FederatedConnectionDTO {
	if o == nil || isNil(o.FederatedConnectionsA) {
		var ret []FederatedConnectionDTO
		return ret
	}
	return o.FederatedConnectionsA
}

// GetFederatedConnectionsAOk returns a tuple with the FederatedConnectionsA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetFederatedConnectionsAOk() ([]FederatedConnectionDTO, bool) {
	if o == nil || isNil(o.FederatedConnectionsA) {
    return nil, false
	}
	return o.FederatedConnectionsA, true
}

// HasFederatedConnectionsA returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasFederatedConnectionsA() bool {
	if o != nil && !isNil(o.FederatedConnectionsA) {
		return true
	}

	return false
}

// SetFederatedConnectionsA gets a reference to the given []FederatedConnectionDTO and assigns it to the FederatedConnectionsA field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetFederatedConnectionsA(v []FederatedConnectionDTO) {
	o.FederatedConnectionsA = v
}

// GetFederatedConnectionsB returns the FederatedConnectionsB field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetFederatedConnectionsB() []FederatedConnectionDTO {
	if o == nil || isNil(o.FederatedConnectionsB) {
		var ret []FederatedConnectionDTO
		return ret
	}
	return o.FederatedConnectionsB
}

// GetFederatedConnectionsBOk returns a tuple with the FederatedConnectionsB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetFederatedConnectionsBOk() ([]FederatedConnectionDTO, bool) {
	if o == nil || isNil(o.FederatedConnectionsB) {
    return nil, false
	}
	return o.FederatedConnectionsB, true
}

// HasFederatedConnectionsB returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasFederatedConnectionsB() bool {
	if o != nil && !isNil(o.FederatedConnectionsB) {
		return true
	}

	return false
}

// SetFederatedConnectionsB gets a reference to the given []FederatedConnectionDTO and assigns it to the FederatedConnectionsB field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetFederatedConnectionsB(v []FederatedConnectionDTO) {
	o.FederatedConnectionsB = v
}

// GetGrants returns the Grants field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetGrants() []string {
	if o == nil || isNil(o.Grants) {
		var ret []string
		return ret
	}
	return o.Grants
}

// GetGrantsOk returns a tuple with the Grants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetGrantsOk() ([]string, bool) {
	if o == nil || isNil(o.Grants) {
    return nil, false
	}
	return o.Grants, true
}

// HasGrants returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasGrants() bool {
	if o != nil && !isNil(o.Grants) {
		return true
	}

	return false
}

// SetGrants gets a reference to the given []string and assigns it to the Grants field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetGrants(v []string) {
	o.Grants = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetId(v int64) {
	o.Id = &v
}

// GetIdTokenEncryptionAlg returns the IdTokenEncryptionAlg field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIdTokenEncryptionAlg() string {
	if o == nil || isNil(o.IdTokenEncryptionAlg) {
		var ret string
		return ret
	}
	return *o.IdTokenEncryptionAlg
}

// GetIdTokenEncryptionAlgOk returns a tuple with the IdTokenEncryptionAlg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIdTokenEncryptionAlgOk() (*string, bool) {
	if o == nil || isNil(o.IdTokenEncryptionAlg) {
    return nil, false
	}
	return o.IdTokenEncryptionAlg, true
}

// HasIdTokenEncryptionAlg returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasIdTokenEncryptionAlg() bool {
	if o != nil && !isNil(o.IdTokenEncryptionAlg) {
		return true
	}

	return false
}

// SetIdTokenEncryptionAlg gets a reference to the given string and assigns it to the IdTokenEncryptionAlg field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetIdTokenEncryptionAlg(v string) {
	o.IdTokenEncryptionAlg = &v
}

// GetIdTokenEncryptionMethod returns the IdTokenEncryptionMethod field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIdTokenEncryptionMethod() string {
	if o == nil || isNil(o.IdTokenEncryptionMethod) {
		var ret string
		return ret
	}
	return *o.IdTokenEncryptionMethod
}

// GetIdTokenEncryptionMethodOk returns a tuple with the IdTokenEncryptionMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIdTokenEncryptionMethodOk() (*string, bool) {
	if o == nil || isNil(o.IdTokenEncryptionMethod) {
    return nil, false
	}
	return o.IdTokenEncryptionMethod, true
}

// HasIdTokenEncryptionMethod returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasIdTokenEncryptionMethod() bool {
	if o != nil && !isNil(o.IdTokenEncryptionMethod) {
		return true
	}

	return false
}

// SetIdTokenEncryptionMethod gets a reference to the given string and assigns it to the IdTokenEncryptionMethod field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetIdTokenEncryptionMethod(v string) {
	o.IdTokenEncryptionMethod = &v
}

// GetIdTokenSigningAlg returns the IdTokenSigningAlg field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIdTokenSigningAlg() string {
	if o == nil || isNil(o.IdTokenSigningAlg) {
		var ret string
		return ret
	}
	return *o.IdTokenSigningAlg
}

// GetIdTokenSigningAlgOk returns a tuple with the IdTokenSigningAlg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIdTokenSigningAlgOk() (*string, bool) {
	if o == nil || isNil(o.IdTokenSigningAlg) {
    return nil, false
	}
	return o.IdTokenSigningAlg, true
}

// HasIdTokenSigningAlg returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasIdTokenSigningAlg() bool {
	if o != nil && !isNil(o.IdTokenSigningAlg) {
		return true
	}

	return false
}

// SetIdTokenSigningAlg gets a reference to the given string and assigns it to the IdTokenSigningAlg field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetIdTokenSigningAlg(v string) {
	o.IdTokenSigningAlg = &v
}

// GetIdentityAppliance returns the IdentityAppliance field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIdentityAppliance() IdentityApplianceDefinitionDTO {
	if o == nil || isNil(o.IdentityAppliance) {
		var ret IdentityApplianceDefinitionDTO
		return ret
	}
	return *o.IdentityAppliance
}

// GetIdentityApplianceOk returns a tuple with the IdentityAppliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIdentityApplianceOk() (*IdentityApplianceDefinitionDTO, bool) {
	if o == nil || isNil(o.IdentityAppliance) {
    return nil, false
	}
	return o.IdentityAppliance, true
}

// HasIdentityAppliance returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasIdentityAppliance() bool {
	if o != nil && !isNil(o.IdentityAppliance) {
		return true
	}

	return false
}

// SetIdentityAppliance gets a reference to the given IdentityApplianceDefinitionDTO and assigns it to the IdentityAppliance field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetIdentityAppliance(v IdentityApplianceDefinitionDTO) {
	o.IdentityAppliance = &v
}

// GetIdentityLookups returns the IdentityLookups field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIdentityLookups() []IdentityLookupDTO {
	if o == nil || isNil(o.IdentityLookups) {
		var ret []IdentityLookupDTO
		return ret
	}
	return o.IdentityLookups
}

// GetIdentityLookupsOk returns a tuple with the IdentityLookups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIdentityLookupsOk() ([]IdentityLookupDTO, bool) {
	if o == nil || isNil(o.IdentityLookups) {
    return nil, false
	}
	return o.IdentityLookups, true
}

// HasIdentityLookups returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasIdentityLookups() bool {
	if o != nil && !isNil(o.IdentityLookups) {
		return true
	}

	return false
}

// SetIdentityLookups gets a reference to the given []IdentityLookupDTO and assigns it to the IdentityLookups field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetIdentityLookups(v []IdentityLookupDTO) {
	o.IdentityLookups = v
}

// GetIdentityMappingPolicy returns the IdentityMappingPolicy field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIdentityMappingPolicy() IdentityMappingPolicyDTO {
	if o == nil || isNil(o.IdentityMappingPolicy) {
		var ret IdentityMappingPolicyDTO
		return ret
	}
	return *o.IdentityMappingPolicy
}

// GetIdentityMappingPolicyOk returns a tuple with the IdentityMappingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIdentityMappingPolicyOk() (*IdentityMappingPolicyDTO, bool) {
	if o == nil || isNil(o.IdentityMappingPolicy) {
    return nil, false
	}
	return o.IdentityMappingPolicy, true
}

// HasIdentityMappingPolicy returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasIdentityMappingPolicy() bool {
	if o != nil && !isNil(o.IdentityMappingPolicy) {
		return true
	}

	return false
}

// SetIdentityMappingPolicy gets a reference to the given IdentityMappingPolicyDTO and assigns it to the IdentityMappingPolicy field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetIdentityMappingPolicy(v IdentityMappingPolicyDTO) {
	o.IdentityMappingPolicy = &v
}

// GetIsRemote returns the IsRemote field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIsRemote() bool {
	if o == nil || isNil(o.IsRemote) {
		var ret bool
		return ret
	}
	return *o.IsRemote
}

// GetIsRemoteOk returns a tuple with the IsRemote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetIsRemoteOk() (*bool, bool) {
	if o == nil || isNil(o.IsRemote) {
    return nil, false
	}
	return o.IsRemote, true
}

// HasIsRemote returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasIsRemote() bool {
	if o != nil && !isNil(o.IsRemote) {
		return true
	}

	return false
}

// SetIsRemote gets a reference to the given bool and assigns it to the IsRemote field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetIsRemote(v bool) {
	o.IsRemote = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetLocation() LocationDTO {
	if o == nil || isNil(o.Location) {
		var ret LocationDTO
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetLocationOk() (*LocationDTO, bool) {
	if o == nil || isNil(o.Location) {
    return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasLocation() bool {
	if o != nil && !isNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given LocationDTO and assigns it to the Location field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetLocation(v LocationDTO) {
	o.Location = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetMetadata() ResourceDTO {
	if o == nil || isNil(o.Metadata) {
		var ret ResourceDTO
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetMetadataOk() (*ResourceDTO, bool) {
	if o == nil || isNil(o.Metadata) {
    return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ResourceDTO and assigns it to the Metadata field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetMetadata(v ResourceDTO) {
	o.Metadata = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetName(v string) {
	o.Name = &v
}

// GetPostLogoutRedirectionURIs returns the PostLogoutRedirectionURIs field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetPostLogoutRedirectionURIs() []string {
	if o == nil || isNil(o.PostLogoutRedirectionURIs) {
		var ret []string
		return ret
	}
	return o.PostLogoutRedirectionURIs
}

// GetPostLogoutRedirectionURIsOk returns a tuple with the PostLogoutRedirectionURIs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetPostLogoutRedirectionURIsOk() ([]string, bool) {
	if o == nil || isNil(o.PostLogoutRedirectionURIs) {
    return nil, false
	}
	return o.PostLogoutRedirectionURIs, true
}

// HasPostLogoutRedirectionURIs returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasPostLogoutRedirectionURIs() bool {
	if o != nil && !isNil(o.PostLogoutRedirectionURIs) {
		return true
	}

	return false
}

// SetPostLogoutRedirectionURIs gets a reference to the given []string and assigns it to the PostLogoutRedirectionURIs field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetPostLogoutRedirectionURIs(v []string) {
	o.PostLogoutRedirectionURIs = v
}

// GetRemote returns the Remote field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetRemote() bool {
	if o == nil || isNil(o.Remote) {
		var ret bool
		return ret
	}
	return *o.Remote
}

// GetRemoteOk returns a tuple with the Remote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetRemoteOk() (*bool, bool) {
	if o == nil || isNil(o.Remote) {
    return nil, false
	}
	return o.Remote, true
}

// HasRemote returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasRemote() bool {
	if o != nil && !isNil(o.Remote) {
		return true
	}

	return false
}

// SetRemote gets a reference to the given bool and assigns it to the Remote field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetRemote(v bool) {
	o.Remote = &v
}

// GetResponseTypes returns the ResponseTypes field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetResponseTypes() []string {
	if o == nil || isNil(o.ResponseTypes) {
		var ret []string
		return ret
	}
	return o.ResponseTypes
}

// GetResponseTypesOk returns a tuple with the ResponseTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetResponseTypesOk() ([]string, bool) {
	if o == nil || isNil(o.ResponseTypes) {
    return nil, false
	}
	return o.ResponseTypes, true
}

// HasResponseTypes returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasResponseTypes() bool {
	if o != nil && !isNil(o.ResponseTypes) {
		return true
	}

	return false
}

// SetResponseTypes gets a reference to the given []string and assigns it to the ResponseTypes field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetResponseTypes(v []string) {
	o.ResponseTypes = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetRole() string {
	if o == nil || isNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetRoleOk() (*string, bool) {
	if o == nil || isNil(o.Role) {
    return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasRole() bool {
	if o != nil && !isNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetRole(v string) {
	o.Role = &v
}

// GetSigningAlg returns the SigningAlg field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetSigningAlg() string {
	if o == nil || isNil(o.SigningAlg) {
		var ret string
		return ret
	}
	return *o.SigningAlg
}

// GetSigningAlgOk returns a tuple with the SigningAlg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetSigningAlgOk() (*string, bool) {
	if o == nil || isNil(o.SigningAlg) {
    return nil, false
	}
	return o.SigningAlg, true
}

// HasSigningAlg returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasSigningAlg() bool {
	if o != nil && !isNil(o.SigningAlg) {
		return true
	}

	return false
}

// SetSigningAlg gets a reference to the given string and assigns it to the SigningAlg field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetSigningAlg(v string) {
	o.SigningAlg = &v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetX() float64 {
	if o == nil || isNil(o.X) {
		var ret float64
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetXOk() (*float64, bool) {
	if o == nil || isNil(o.X) {
    return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasX() bool {
	if o != nil && !isNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given float64 and assigns it to the X field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetX(v float64) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetY() float64 {
	if o == nil || isNil(o.Y) {
		var ret float64
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) GetYOk() (*float64, bool) {
	if o == nil || isNil(o.Y) {
    return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *ExternalOpenIDConnectRelayingPartyDTO) HasY() bool {
	if o != nil && !isNil(o.Y) {
		return true
	}

	return false
}

// SetY gets a reference to the given float64 and assigns it to the Y field.
func (o *ExternalOpenIDConnectRelayingPartyDTO) SetY(v float64) {
	o.Y = &v
}

func (o ExternalOpenIDConnectRelayingPartyDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AccountLinkagePolicy) {
		toSerialize["accountLinkagePolicy"] = o.AccountLinkagePolicy
	}
	if !isNil(o.ActiveBindings) {
		toSerialize["activeBindings"] = o.ActiveBindings
	}
	if !isNil(o.ActiveProfiles) {
		toSerialize["activeProfiles"] = o.ActiveProfiles
	}
	if !isNil(o.AuthorizedURIs) {
		toSerialize["authorizedURIs"] = o.AuthorizedURIs
	}
	if !isNil(o.ClientAuthnMethod) {
		toSerialize["clientAuthnMethod"] = o.ClientAuthnMethod
	}
	if !isNil(o.ClientCert) {
		toSerialize["clientCert"] = o.ClientCert
	}
	if !isNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !isNil(o.ClientSecret) {
		toSerialize["clientSecret"] = o.ClientSecret
	}
	if !isNil(o.ClientType) {
		toSerialize["clientType"] = o.ClientType
	}
	if !isNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !isNil(o.ElementId) {
		toSerialize["elementId"] = o.ElementId
	}
	if !isNil(o.EncryptionAlg) {
		toSerialize["encryptionAlg"] = o.EncryptionAlg
	}
	if !isNil(o.EncryptionMethod) {
		toSerialize["encryptionMethod"] = o.EncryptionMethod
	}
	if !isNil(o.FederatedConnectionsA) {
		toSerialize["federatedConnectionsA"] = o.FederatedConnectionsA
	}
	if !isNil(o.FederatedConnectionsB) {
		toSerialize["federatedConnectionsB"] = o.FederatedConnectionsB
	}
	if !isNil(o.Grants) {
		toSerialize["grants"] = o.Grants
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.IdTokenEncryptionAlg) {
		toSerialize["idTokenEncryptionAlg"] = o.IdTokenEncryptionAlg
	}
	if !isNil(o.IdTokenEncryptionMethod) {
		toSerialize["idTokenEncryptionMethod"] = o.IdTokenEncryptionMethod
	}
	if !isNil(o.IdTokenSigningAlg) {
		toSerialize["idTokenSigningAlg"] = o.IdTokenSigningAlg
	}
	if !isNil(o.IdentityAppliance) {
		toSerialize["identityAppliance"] = o.IdentityAppliance
	}
	if !isNil(o.IdentityLookups) {
		toSerialize["identityLookups"] = o.IdentityLookups
	}
	if !isNil(o.IdentityMappingPolicy) {
		toSerialize["identityMappingPolicy"] = o.IdentityMappingPolicy
	}
	if !isNil(o.IsRemote) {
		toSerialize["isRemote"] = o.IsRemote
	}
	if !isNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.PostLogoutRedirectionURIs) {
		toSerialize["postLogoutRedirectionURIs"] = o.PostLogoutRedirectionURIs
	}
	if !isNil(o.Remote) {
		toSerialize["remote"] = o.Remote
	}
	if !isNil(o.ResponseTypes) {
		toSerialize["responseTypes"] = o.ResponseTypes
	}
	if !isNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !isNil(o.SigningAlg) {
		toSerialize["signingAlg"] = o.SigningAlg
	}
	if !isNil(o.X) {
		toSerialize["x"] = o.X
	}
	if !isNil(o.Y) {
		toSerialize["y"] = o.Y
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ExternalOpenIDConnectRelayingPartyDTO) UnmarshalJSON(bytes []byte) (err error) {
	varExternalOpenIDConnectRelayingPartyDTO := _ExternalOpenIDConnectRelayingPartyDTO{}

	if err = json.Unmarshal(bytes, &varExternalOpenIDConnectRelayingPartyDTO); err == nil {
		*o = ExternalOpenIDConnectRelayingPartyDTO(varExternalOpenIDConnectRelayingPartyDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "accountLinkagePolicy")
		delete(additionalProperties, "activeBindings")
		delete(additionalProperties, "activeProfiles")
		delete(additionalProperties, "authorizedURIs")
		delete(additionalProperties, "clientAuthnMethod")
		delete(additionalProperties, "clientCert")
		delete(additionalProperties, "clientId")
		delete(additionalProperties, "clientSecret")
		delete(additionalProperties, "clientType")
		delete(additionalProperties, "config")
		delete(additionalProperties, "description")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "elementId")
		delete(additionalProperties, "encryptionAlg")
		delete(additionalProperties, "encryptionMethod")
		delete(additionalProperties, "federatedConnectionsA")
		delete(additionalProperties, "federatedConnectionsB")
		delete(additionalProperties, "grants")
		delete(additionalProperties, "id")
		delete(additionalProperties, "idTokenEncryptionAlg")
		delete(additionalProperties, "idTokenEncryptionMethod")
		delete(additionalProperties, "idTokenSigningAlg")
		delete(additionalProperties, "identityAppliance")
		delete(additionalProperties, "identityLookups")
		delete(additionalProperties, "identityMappingPolicy")
		delete(additionalProperties, "isRemote")
		delete(additionalProperties, "location")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "name")
		delete(additionalProperties, "postLogoutRedirectionURIs")
		delete(additionalProperties, "remote")
		delete(additionalProperties, "responseTypes")
		delete(additionalProperties, "role")
		delete(additionalProperties, "signingAlg")
		delete(additionalProperties, "x")
		delete(additionalProperties, "y")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExternalOpenIDConnectRelayingPartyDTO struct {
	value *ExternalOpenIDConnectRelayingPartyDTO
	isSet bool
}

func (v NullableExternalOpenIDConnectRelayingPartyDTO) Get() *ExternalOpenIDConnectRelayingPartyDTO {
	return v.value
}

func (v *NullableExternalOpenIDConnectRelayingPartyDTO) Set(val *ExternalOpenIDConnectRelayingPartyDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalOpenIDConnectRelayingPartyDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalOpenIDConnectRelayingPartyDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalOpenIDConnectRelayingPartyDTO(val *ExternalOpenIDConnectRelayingPartyDTO) *NullableExternalOpenIDConnectRelayingPartyDTO {
	return &NullableExternalOpenIDConnectRelayingPartyDTO{value: val, isSet: true}
}

func (v NullableExternalOpenIDConnectRelayingPartyDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalOpenIDConnectRelayingPartyDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


