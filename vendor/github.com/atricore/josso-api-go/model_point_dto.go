/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.1-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// PointDTO struct for PointDTO
type PointDTO struct {
	X *int64 `json:"x,omitempty"`
	Y *int64 `json:"y,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PointDTO PointDTO

// NewPointDTO instantiates a new PointDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPointDTO() *PointDTO {
	this := PointDTO{}
	return &this
}

// NewPointDTOWithDefaults instantiates a new PointDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPointDTOWithDefaults() *PointDTO {
	this := PointDTO{}
	return &this
}

// GetX returns the X field value if set, zero value otherwise.
func (o *PointDTO) GetX() int64 {
	if o == nil || isNil(o.X) {
		var ret int64
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointDTO) GetXOk() (*int64, bool) {
	if o == nil || isNil(o.X) {
    return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *PointDTO) HasX() bool {
	if o != nil && !isNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given int64 and assigns it to the X field.
func (o *PointDTO) SetX(v int64) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *PointDTO) GetY() int64 {
	if o == nil || isNil(o.Y) {
		var ret int64
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointDTO) GetYOk() (*int64, bool) {
	if o == nil || isNil(o.Y) {
    return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *PointDTO) HasY() bool {
	if o != nil && !isNil(o.Y) {
		return true
	}

	return false
}

// SetY gets a reference to the given int64 and assigns it to the Y field.
func (o *PointDTO) SetY(v int64) {
	o.Y = &v
}

func (o PointDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.X) {
		toSerialize["x"] = o.X
	}
	if !isNil(o.Y) {
		toSerialize["y"] = o.Y
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PointDTO) UnmarshalJSON(bytes []byte) (err error) {
	varPointDTO := _PointDTO{}

	if err = json.Unmarshal(bytes, &varPointDTO); err == nil {
		*o = PointDTO(varPointDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "x")
		delete(additionalProperties, "y")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePointDTO struct {
	value *PointDTO
	isSet bool
}

func (v NullablePointDTO) Get() *PointDTO {
	return v.value
}

func (v *NullablePointDTO) Set(val *PointDTO) {
	v.value = val
	v.isSet = true
}

func (v NullablePointDTO) IsSet() bool {
	return v.isSet
}

func (v *NullablePointDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePointDTO(val *PointDTO) *NullablePointDTO {
	return &NullablePointDTO{value: val, isSet: true}
}

func (v NullablePointDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePointDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


