/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.1-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// AttributeMappingDTO struct for AttributeMappingDTO
type AttributeMappingDTO struct {
	AttrName *string `json:"attrName,omitempty"`
	ReportedAttrName *string `json:"reportedAttrName,omitempty"`
	ReportedAttrNameFormat *string `json:"reportedAttrNameFormat,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AttributeMappingDTO AttributeMappingDTO

// NewAttributeMappingDTO instantiates a new AttributeMappingDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeMappingDTO() *AttributeMappingDTO {
	this := AttributeMappingDTO{}
	return &this
}

// NewAttributeMappingDTOWithDefaults instantiates a new AttributeMappingDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeMappingDTOWithDefaults() *AttributeMappingDTO {
	this := AttributeMappingDTO{}
	return &this
}

// GetAttrName returns the AttrName field value if set, zero value otherwise.
func (o *AttributeMappingDTO) GetAttrName() string {
	if o == nil || isNil(o.AttrName) {
		var ret string
		return ret
	}
	return *o.AttrName
}

// GetAttrNameOk returns a tuple with the AttrName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeMappingDTO) GetAttrNameOk() (*string, bool) {
	if o == nil || isNil(o.AttrName) {
    return nil, false
	}
	return o.AttrName, true
}

// HasAttrName returns a boolean if a field has been set.
func (o *AttributeMappingDTO) HasAttrName() bool {
	if o != nil && !isNil(o.AttrName) {
		return true
	}

	return false
}

// SetAttrName gets a reference to the given string and assigns it to the AttrName field.
func (o *AttributeMappingDTO) SetAttrName(v string) {
	o.AttrName = &v
}

// GetReportedAttrName returns the ReportedAttrName field value if set, zero value otherwise.
func (o *AttributeMappingDTO) GetReportedAttrName() string {
	if o == nil || isNil(o.ReportedAttrName) {
		var ret string
		return ret
	}
	return *o.ReportedAttrName
}

// GetReportedAttrNameOk returns a tuple with the ReportedAttrName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeMappingDTO) GetReportedAttrNameOk() (*string, bool) {
	if o == nil || isNil(o.ReportedAttrName) {
    return nil, false
	}
	return o.ReportedAttrName, true
}

// HasReportedAttrName returns a boolean if a field has been set.
func (o *AttributeMappingDTO) HasReportedAttrName() bool {
	if o != nil && !isNil(o.ReportedAttrName) {
		return true
	}

	return false
}

// SetReportedAttrName gets a reference to the given string and assigns it to the ReportedAttrName field.
func (o *AttributeMappingDTO) SetReportedAttrName(v string) {
	o.ReportedAttrName = &v
}

// GetReportedAttrNameFormat returns the ReportedAttrNameFormat field value if set, zero value otherwise.
func (o *AttributeMappingDTO) GetReportedAttrNameFormat() string {
	if o == nil || isNil(o.ReportedAttrNameFormat) {
		var ret string
		return ret
	}
	return *o.ReportedAttrNameFormat
}

// GetReportedAttrNameFormatOk returns a tuple with the ReportedAttrNameFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeMappingDTO) GetReportedAttrNameFormatOk() (*string, bool) {
	if o == nil || isNil(o.ReportedAttrNameFormat) {
    return nil, false
	}
	return o.ReportedAttrNameFormat, true
}

// HasReportedAttrNameFormat returns a boolean if a field has been set.
func (o *AttributeMappingDTO) HasReportedAttrNameFormat() bool {
	if o != nil && !isNil(o.ReportedAttrNameFormat) {
		return true
	}

	return false
}

// SetReportedAttrNameFormat gets a reference to the given string and assigns it to the ReportedAttrNameFormat field.
func (o *AttributeMappingDTO) SetReportedAttrNameFormat(v string) {
	o.ReportedAttrNameFormat = &v
}

func (o AttributeMappingDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AttrName) {
		toSerialize["attrName"] = o.AttrName
	}
	if !isNil(o.ReportedAttrName) {
		toSerialize["reportedAttrName"] = o.ReportedAttrName
	}
	if !isNil(o.ReportedAttrNameFormat) {
		toSerialize["reportedAttrNameFormat"] = o.ReportedAttrNameFormat
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AttributeMappingDTO) UnmarshalJSON(bytes []byte) (err error) {
	varAttributeMappingDTO := _AttributeMappingDTO{}

	if err = json.Unmarshal(bytes, &varAttributeMappingDTO); err == nil {
		*o = AttributeMappingDTO(varAttributeMappingDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "attrName")
		delete(additionalProperties, "reportedAttrName")
		delete(additionalProperties, "reportedAttrNameFormat")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAttributeMappingDTO struct {
	value *AttributeMappingDTO
	isSet bool
}

func (v NullableAttributeMappingDTO) Get() *AttributeMappingDTO {
	return v.value
}

func (v *NullableAttributeMappingDTO) Set(val *AttributeMappingDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeMappingDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeMappingDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeMappingDTO(val *AttributeMappingDTO) *NullableAttributeMappingDTO {
	return &NullableAttributeMappingDTO{value: val, isSet: true}
}

func (v NullableAttributeMappingDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeMappingDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


