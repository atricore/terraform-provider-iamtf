/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.0-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// IdentityMappingPolicyDTO struct for IdentityMappingPolicyDTO
type IdentityMappingPolicyDTO struct {
	CustomMapper *string `json:"customMapper,omitempty"`
	ElementId *string `json:"elementId,omitempty"`
	Id *int64 `json:"id,omitempty"`
	MappingType *string `json:"mappingType,omitempty"`
	Name *string `json:"name,omitempty"`
	UseLocalId *bool `json:"useLocalId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityMappingPolicyDTO IdentityMappingPolicyDTO

// NewIdentityMappingPolicyDTO instantiates a new IdentityMappingPolicyDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityMappingPolicyDTO() *IdentityMappingPolicyDTO {
	this := IdentityMappingPolicyDTO{}
	return &this
}

// NewIdentityMappingPolicyDTOWithDefaults instantiates a new IdentityMappingPolicyDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityMappingPolicyDTOWithDefaults() *IdentityMappingPolicyDTO {
	this := IdentityMappingPolicyDTO{}
	return &this
}

// GetCustomMapper returns the CustomMapper field value if set, zero value otherwise.
func (o *IdentityMappingPolicyDTO) GetCustomMapper() string {
	if o == nil || isNil(o.CustomMapper) {
		var ret string
		return ret
	}
	return *o.CustomMapper
}

// GetCustomMapperOk returns a tuple with the CustomMapper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMappingPolicyDTO) GetCustomMapperOk() (*string, bool) {
	if o == nil || isNil(o.CustomMapper) {
    return nil, false
	}
	return o.CustomMapper, true
}

// HasCustomMapper returns a boolean if a field has been set.
func (o *IdentityMappingPolicyDTO) HasCustomMapper() bool {
	if o != nil && !isNil(o.CustomMapper) {
		return true
	}

	return false
}

// SetCustomMapper gets a reference to the given string and assigns it to the CustomMapper field.
func (o *IdentityMappingPolicyDTO) SetCustomMapper(v string) {
	o.CustomMapper = &v
}

// GetElementId returns the ElementId field value if set, zero value otherwise.
func (o *IdentityMappingPolicyDTO) GetElementId() string {
	if o == nil || isNil(o.ElementId) {
		var ret string
		return ret
	}
	return *o.ElementId
}

// GetElementIdOk returns a tuple with the ElementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMappingPolicyDTO) GetElementIdOk() (*string, bool) {
	if o == nil || isNil(o.ElementId) {
    return nil, false
	}
	return o.ElementId, true
}

// HasElementId returns a boolean if a field has been set.
func (o *IdentityMappingPolicyDTO) HasElementId() bool {
	if o != nil && !isNil(o.ElementId) {
		return true
	}

	return false
}

// SetElementId gets a reference to the given string and assigns it to the ElementId field.
func (o *IdentityMappingPolicyDTO) SetElementId(v string) {
	o.ElementId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IdentityMappingPolicyDTO) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMappingPolicyDTO) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IdentityMappingPolicyDTO) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *IdentityMappingPolicyDTO) SetId(v int64) {
	o.Id = &v
}

// GetMappingType returns the MappingType field value if set, zero value otherwise.
func (o *IdentityMappingPolicyDTO) GetMappingType() string {
	if o == nil || isNil(o.MappingType) {
		var ret string
		return ret
	}
	return *o.MappingType
}

// GetMappingTypeOk returns a tuple with the MappingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMappingPolicyDTO) GetMappingTypeOk() (*string, bool) {
	if o == nil || isNil(o.MappingType) {
    return nil, false
	}
	return o.MappingType, true
}

// HasMappingType returns a boolean if a field has been set.
func (o *IdentityMappingPolicyDTO) HasMappingType() bool {
	if o != nil && !isNil(o.MappingType) {
		return true
	}

	return false
}

// SetMappingType gets a reference to the given string and assigns it to the MappingType field.
func (o *IdentityMappingPolicyDTO) SetMappingType(v string) {
	o.MappingType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IdentityMappingPolicyDTO) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMappingPolicyDTO) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IdentityMappingPolicyDTO) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IdentityMappingPolicyDTO) SetName(v string) {
	o.Name = &v
}

// GetUseLocalId returns the UseLocalId field value if set, zero value otherwise.
func (o *IdentityMappingPolicyDTO) GetUseLocalId() bool {
	if o == nil || isNil(o.UseLocalId) {
		var ret bool
		return ret
	}
	return *o.UseLocalId
}

// GetUseLocalIdOk returns a tuple with the UseLocalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMappingPolicyDTO) GetUseLocalIdOk() (*bool, bool) {
	if o == nil || isNil(o.UseLocalId) {
    return nil, false
	}
	return o.UseLocalId, true
}

// HasUseLocalId returns a boolean if a field has been set.
func (o *IdentityMappingPolicyDTO) HasUseLocalId() bool {
	if o != nil && !isNil(o.UseLocalId) {
		return true
	}

	return false
}

// SetUseLocalId gets a reference to the given bool and assigns it to the UseLocalId field.
func (o *IdentityMappingPolicyDTO) SetUseLocalId(v bool) {
	o.UseLocalId = &v
}

func (o IdentityMappingPolicyDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CustomMapper) {
		toSerialize["customMapper"] = o.CustomMapper
	}
	if !isNil(o.ElementId) {
		toSerialize["elementId"] = o.ElementId
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.MappingType) {
		toSerialize["mappingType"] = o.MappingType
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.UseLocalId) {
		toSerialize["useLocalId"] = o.UseLocalId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IdentityMappingPolicyDTO) UnmarshalJSON(bytes []byte) (err error) {
	varIdentityMappingPolicyDTO := _IdentityMappingPolicyDTO{}

	if err = json.Unmarshal(bytes, &varIdentityMappingPolicyDTO); err == nil {
		*o = IdentityMappingPolicyDTO(varIdentityMappingPolicyDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "customMapper")
		delete(additionalProperties, "elementId")
		delete(additionalProperties, "id")
		delete(additionalProperties, "mappingType")
		delete(additionalProperties, "name")
		delete(additionalProperties, "useLocalId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityMappingPolicyDTO struct {
	value *IdentityMappingPolicyDTO
	isSet bool
}

func (v NullableIdentityMappingPolicyDTO) Get() *IdentityMappingPolicyDTO {
	return v.value
}

func (v *NullableIdentityMappingPolicyDTO) Set(val *IdentityMappingPolicyDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityMappingPolicyDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityMappingPolicyDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityMappingPolicyDTO(val *IdentityMappingPolicyDTO) *NullableIdentityMappingPolicyDTO {
	return &NullableIdentityMappingPolicyDTO{value: val, isSet: true}
}

func (v NullableIdentityMappingPolicyDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityMappingPolicyDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


