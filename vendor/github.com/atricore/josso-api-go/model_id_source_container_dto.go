/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.1-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// IdSourceContainerDTO struct for IdSourceContainerDTO
type IdSourceContainerDTO struct {
	IdSource *IdentitySourceDTO `json:"idSource,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdSourceContainerDTO IdSourceContainerDTO

// NewIdSourceContainerDTO instantiates a new IdSourceContainerDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdSourceContainerDTO() *IdSourceContainerDTO {
	this := IdSourceContainerDTO{}
	return &this
}

// NewIdSourceContainerDTOWithDefaults instantiates a new IdSourceContainerDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdSourceContainerDTOWithDefaults() *IdSourceContainerDTO {
	this := IdSourceContainerDTO{}
	return &this
}

// GetIdSource returns the IdSource field value if set, zero value otherwise.
func (o *IdSourceContainerDTO) GetIdSource() IdentitySourceDTO {
	if o == nil || isNil(o.IdSource) {
		var ret IdentitySourceDTO
		return ret
	}
	return *o.IdSource
}

// GetIdSourceOk returns a tuple with the IdSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdSourceContainerDTO) GetIdSourceOk() (*IdentitySourceDTO, bool) {
	if o == nil || isNil(o.IdSource) {
    return nil, false
	}
	return o.IdSource, true
}

// HasIdSource returns a boolean if a field has been set.
func (o *IdSourceContainerDTO) HasIdSource() bool {
	if o != nil && !isNil(o.IdSource) {
		return true
	}

	return false
}

// SetIdSource gets a reference to the given IdentitySourceDTO and assigns it to the IdSource field.
func (o *IdSourceContainerDTO) SetIdSource(v IdentitySourceDTO) {
	o.IdSource = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IdSourceContainerDTO) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdSourceContainerDTO) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IdSourceContainerDTO) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IdSourceContainerDTO) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IdSourceContainerDTO) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdSourceContainerDTO) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IdSourceContainerDTO) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IdSourceContainerDTO) SetType(v string) {
	o.Type = &v
}

func (o IdSourceContainerDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IdSource) {
		toSerialize["idSource"] = o.IdSource
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IdSourceContainerDTO) UnmarshalJSON(bytes []byte) (err error) {
	varIdSourceContainerDTO := _IdSourceContainerDTO{}

	if err = json.Unmarshal(bytes, &varIdSourceContainerDTO); err == nil {
		*o = IdSourceContainerDTO(varIdSourceContainerDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "idSource")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdSourceContainerDTO struct {
	value *IdSourceContainerDTO
	isSet bool
}

func (v NullableIdSourceContainerDTO) Get() *IdSourceContainerDTO {
	return v.value
}

func (v *NullableIdSourceContainerDTO) Set(val *IdSourceContainerDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableIdSourceContainerDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableIdSourceContainerDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdSourceContainerDTO(val *IdSourceContainerDTO) *NullableIdSourceContainerDTO {
	return &NullableIdSourceContainerDTO{value: val, isSet: true}
}

func (v NullableIdSourceContainerDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdSourceContainerDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


