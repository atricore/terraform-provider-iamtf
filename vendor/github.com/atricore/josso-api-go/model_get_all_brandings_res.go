/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.0-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// GetAllBrandingsRes struct for GetAllBrandingsRes
type GetAllBrandingsRes struct {
	Brandings []BrandingDefinitionDTO `json:"brandings,omitempty"`
	Error *string `json:"error,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetAllBrandingsRes GetAllBrandingsRes

// NewGetAllBrandingsRes instantiates a new GetAllBrandingsRes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetAllBrandingsRes() *GetAllBrandingsRes {
	this := GetAllBrandingsRes{}
	return &this
}

// NewGetAllBrandingsResWithDefaults instantiates a new GetAllBrandingsRes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetAllBrandingsResWithDefaults() *GetAllBrandingsRes {
	this := GetAllBrandingsRes{}
	return &this
}

// GetBrandings returns the Brandings field value if set, zero value otherwise.
func (o *GetAllBrandingsRes) GetBrandings() []BrandingDefinitionDTO {
	if o == nil || isNil(o.Brandings) {
		var ret []BrandingDefinitionDTO
		return ret
	}
	return o.Brandings
}

// GetBrandingsOk returns a tuple with the Brandings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllBrandingsRes) GetBrandingsOk() ([]BrandingDefinitionDTO, bool) {
	if o == nil || isNil(o.Brandings) {
    return nil, false
	}
	return o.Brandings, true
}

// HasBrandings returns a boolean if a field has been set.
func (o *GetAllBrandingsRes) HasBrandings() bool {
	if o != nil && !isNil(o.Brandings) {
		return true
	}

	return false
}

// SetBrandings gets a reference to the given []BrandingDefinitionDTO and assigns it to the Brandings field.
func (o *GetAllBrandingsRes) SetBrandings(v []BrandingDefinitionDTO) {
	o.Brandings = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *GetAllBrandingsRes) GetError() string {
	if o == nil || isNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllBrandingsRes) GetErrorOk() (*string, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *GetAllBrandingsRes) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *GetAllBrandingsRes) SetError(v string) {
	o.Error = &v
}

func (o GetAllBrandingsRes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Brandings) {
		toSerialize["brandings"] = o.Brandings
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *GetAllBrandingsRes) UnmarshalJSON(bytes []byte) (err error) {
	varGetAllBrandingsRes := _GetAllBrandingsRes{}

	if err = json.Unmarshal(bytes, &varGetAllBrandingsRes); err == nil {
		*o = GetAllBrandingsRes(varGetAllBrandingsRes)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "brandings")
		delete(additionalProperties, "error")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetAllBrandingsRes struct {
	value *GetAllBrandingsRes
	isSet bool
}

func (v NullableGetAllBrandingsRes) Get() *GetAllBrandingsRes {
	return v.value
}

func (v *NullableGetAllBrandingsRes) Set(val *GetAllBrandingsRes) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAllBrandingsRes) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAllBrandingsRes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAllBrandingsRes(val *GetAllBrandingsRes) *NullableGetAllBrandingsRes {
	return &NullableGetAllBrandingsRes{value: val, isSet: true}
}

func (v NullableGetAllBrandingsRes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAllBrandingsRes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


