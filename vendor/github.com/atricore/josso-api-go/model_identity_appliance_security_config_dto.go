/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.0-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// IdentityApplianceSecurityConfigDTO struct for IdentityApplianceSecurityConfigDTO
type IdentityApplianceSecurityConfigDTO struct {
	EncryptSensitiveData *bool `json:"encryptSensitiveData,omitempty"`
	Encryption *string `json:"encryption,omitempty"`
	EncryptionConfig *string `json:"encryptionConfig,omitempty"`
	EncryptionConfigFile *string `json:"encryptionConfigFile,omitempty"`
	EncryptionPassword *string `json:"encryptionPassword,omitempty"`
	ExternalConfig *bool `json:"externalConfig,omitempty"`
	ExternalConfigFile *string `json:"externalConfigFile,omitempty"`
	PasswordProperty *string `json:"passwordProperty,omitempty"`
	Salt *string `json:"salt,omitempty"`
	SaltProperty *string `json:"saltProperty,omitempty"`
	SaltValue *string `json:"saltValue,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityApplianceSecurityConfigDTO IdentityApplianceSecurityConfigDTO

// NewIdentityApplianceSecurityConfigDTO instantiates a new IdentityApplianceSecurityConfigDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityApplianceSecurityConfigDTO() *IdentityApplianceSecurityConfigDTO {
	this := IdentityApplianceSecurityConfigDTO{}
	return &this
}

// NewIdentityApplianceSecurityConfigDTOWithDefaults instantiates a new IdentityApplianceSecurityConfigDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityApplianceSecurityConfigDTOWithDefaults() *IdentityApplianceSecurityConfigDTO {
	this := IdentityApplianceSecurityConfigDTO{}
	return &this
}

// GetEncryptSensitiveData returns the EncryptSensitiveData field value if set, zero value otherwise.
func (o *IdentityApplianceSecurityConfigDTO) GetEncryptSensitiveData() bool {
	if o == nil || isNil(o.EncryptSensitiveData) {
		var ret bool
		return ret
	}
	return *o.EncryptSensitiveData
}

// GetEncryptSensitiveDataOk returns a tuple with the EncryptSensitiveData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceSecurityConfigDTO) GetEncryptSensitiveDataOk() (*bool, bool) {
	if o == nil || isNil(o.EncryptSensitiveData) {
    return nil, false
	}
	return o.EncryptSensitiveData, true
}

// HasEncryptSensitiveData returns a boolean if a field has been set.
func (o *IdentityApplianceSecurityConfigDTO) HasEncryptSensitiveData() bool {
	if o != nil && !isNil(o.EncryptSensitiveData) {
		return true
	}

	return false
}

// SetEncryptSensitiveData gets a reference to the given bool and assigns it to the EncryptSensitiveData field.
func (o *IdentityApplianceSecurityConfigDTO) SetEncryptSensitiveData(v bool) {
	o.EncryptSensitiveData = &v
}

// GetEncryption returns the Encryption field value if set, zero value otherwise.
func (o *IdentityApplianceSecurityConfigDTO) GetEncryption() string {
	if o == nil || isNil(o.Encryption) {
		var ret string
		return ret
	}
	return *o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceSecurityConfigDTO) GetEncryptionOk() (*string, bool) {
	if o == nil || isNil(o.Encryption) {
    return nil, false
	}
	return o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *IdentityApplianceSecurityConfigDTO) HasEncryption() bool {
	if o != nil && !isNil(o.Encryption) {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given string and assigns it to the Encryption field.
func (o *IdentityApplianceSecurityConfigDTO) SetEncryption(v string) {
	o.Encryption = &v
}

// GetEncryptionConfig returns the EncryptionConfig field value if set, zero value otherwise.
func (o *IdentityApplianceSecurityConfigDTO) GetEncryptionConfig() string {
	if o == nil || isNil(o.EncryptionConfig) {
		var ret string
		return ret
	}
	return *o.EncryptionConfig
}

// GetEncryptionConfigOk returns a tuple with the EncryptionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceSecurityConfigDTO) GetEncryptionConfigOk() (*string, bool) {
	if o == nil || isNil(o.EncryptionConfig) {
    return nil, false
	}
	return o.EncryptionConfig, true
}

// HasEncryptionConfig returns a boolean if a field has been set.
func (o *IdentityApplianceSecurityConfigDTO) HasEncryptionConfig() bool {
	if o != nil && !isNil(o.EncryptionConfig) {
		return true
	}

	return false
}

// SetEncryptionConfig gets a reference to the given string and assigns it to the EncryptionConfig field.
func (o *IdentityApplianceSecurityConfigDTO) SetEncryptionConfig(v string) {
	o.EncryptionConfig = &v
}

// GetEncryptionConfigFile returns the EncryptionConfigFile field value if set, zero value otherwise.
func (o *IdentityApplianceSecurityConfigDTO) GetEncryptionConfigFile() string {
	if o == nil || isNil(o.EncryptionConfigFile) {
		var ret string
		return ret
	}
	return *o.EncryptionConfigFile
}

// GetEncryptionConfigFileOk returns a tuple with the EncryptionConfigFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceSecurityConfigDTO) GetEncryptionConfigFileOk() (*string, bool) {
	if o == nil || isNil(o.EncryptionConfigFile) {
    return nil, false
	}
	return o.EncryptionConfigFile, true
}

// HasEncryptionConfigFile returns a boolean if a field has been set.
func (o *IdentityApplianceSecurityConfigDTO) HasEncryptionConfigFile() bool {
	if o != nil && !isNil(o.EncryptionConfigFile) {
		return true
	}

	return false
}

// SetEncryptionConfigFile gets a reference to the given string and assigns it to the EncryptionConfigFile field.
func (o *IdentityApplianceSecurityConfigDTO) SetEncryptionConfigFile(v string) {
	o.EncryptionConfigFile = &v
}

// GetEncryptionPassword returns the EncryptionPassword field value if set, zero value otherwise.
func (o *IdentityApplianceSecurityConfigDTO) GetEncryptionPassword() string {
	if o == nil || isNil(o.EncryptionPassword) {
		var ret string
		return ret
	}
	return *o.EncryptionPassword
}

// GetEncryptionPasswordOk returns a tuple with the EncryptionPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceSecurityConfigDTO) GetEncryptionPasswordOk() (*string, bool) {
	if o == nil || isNil(o.EncryptionPassword) {
    return nil, false
	}
	return o.EncryptionPassword, true
}

// HasEncryptionPassword returns a boolean if a field has been set.
func (o *IdentityApplianceSecurityConfigDTO) HasEncryptionPassword() bool {
	if o != nil && !isNil(o.EncryptionPassword) {
		return true
	}

	return false
}

// SetEncryptionPassword gets a reference to the given string and assigns it to the EncryptionPassword field.
func (o *IdentityApplianceSecurityConfigDTO) SetEncryptionPassword(v string) {
	o.EncryptionPassword = &v
}

// GetExternalConfig returns the ExternalConfig field value if set, zero value otherwise.
func (o *IdentityApplianceSecurityConfigDTO) GetExternalConfig() bool {
	if o == nil || isNil(o.ExternalConfig) {
		var ret bool
		return ret
	}
	return *o.ExternalConfig
}

// GetExternalConfigOk returns a tuple with the ExternalConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceSecurityConfigDTO) GetExternalConfigOk() (*bool, bool) {
	if o == nil || isNil(o.ExternalConfig) {
    return nil, false
	}
	return o.ExternalConfig, true
}

// HasExternalConfig returns a boolean if a field has been set.
func (o *IdentityApplianceSecurityConfigDTO) HasExternalConfig() bool {
	if o != nil && !isNil(o.ExternalConfig) {
		return true
	}

	return false
}

// SetExternalConfig gets a reference to the given bool and assigns it to the ExternalConfig field.
func (o *IdentityApplianceSecurityConfigDTO) SetExternalConfig(v bool) {
	o.ExternalConfig = &v
}

// GetExternalConfigFile returns the ExternalConfigFile field value if set, zero value otherwise.
func (o *IdentityApplianceSecurityConfigDTO) GetExternalConfigFile() string {
	if o == nil || isNil(o.ExternalConfigFile) {
		var ret string
		return ret
	}
	return *o.ExternalConfigFile
}

// GetExternalConfigFileOk returns a tuple with the ExternalConfigFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceSecurityConfigDTO) GetExternalConfigFileOk() (*string, bool) {
	if o == nil || isNil(o.ExternalConfigFile) {
    return nil, false
	}
	return o.ExternalConfigFile, true
}

// HasExternalConfigFile returns a boolean if a field has been set.
func (o *IdentityApplianceSecurityConfigDTO) HasExternalConfigFile() bool {
	if o != nil && !isNil(o.ExternalConfigFile) {
		return true
	}

	return false
}

// SetExternalConfigFile gets a reference to the given string and assigns it to the ExternalConfigFile field.
func (o *IdentityApplianceSecurityConfigDTO) SetExternalConfigFile(v string) {
	o.ExternalConfigFile = &v
}

// GetPasswordProperty returns the PasswordProperty field value if set, zero value otherwise.
func (o *IdentityApplianceSecurityConfigDTO) GetPasswordProperty() string {
	if o == nil || isNil(o.PasswordProperty) {
		var ret string
		return ret
	}
	return *o.PasswordProperty
}

// GetPasswordPropertyOk returns a tuple with the PasswordProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceSecurityConfigDTO) GetPasswordPropertyOk() (*string, bool) {
	if o == nil || isNil(o.PasswordProperty) {
    return nil, false
	}
	return o.PasswordProperty, true
}

// HasPasswordProperty returns a boolean if a field has been set.
func (o *IdentityApplianceSecurityConfigDTO) HasPasswordProperty() bool {
	if o != nil && !isNil(o.PasswordProperty) {
		return true
	}

	return false
}

// SetPasswordProperty gets a reference to the given string and assigns it to the PasswordProperty field.
func (o *IdentityApplianceSecurityConfigDTO) SetPasswordProperty(v string) {
	o.PasswordProperty = &v
}

// GetSalt returns the Salt field value if set, zero value otherwise.
func (o *IdentityApplianceSecurityConfigDTO) GetSalt() string {
	if o == nil || isNil(o.Salt) {
		var ret string
		return ret
	}
	return *o.Salt
}

// GetSaltOk returns a tuple with the Salt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceSecurityConfigDTO) GetSaltOk() (*string, bool) {
	if o == nil || isNil(o.Salt) {
    return nil, false
	}
	return o.Salt, true
}

// HasSalt returns a boolean if a field has been set.
func (o *IdentityApplianceSecurityConfigDTO) HasSalt() bool {
	if o != nil && !isNil(o.Salt) {
		return true
	}

	return false
}

// SetSalt gets a reference to the given string and assigns it to the Salt field.
func (o *IdentityApplianceSecurityConfigDTO) SetSalt(v string) {
	o.Salt = &v
}

// GetSaltProperty returns the SaltProperty field value if set, zero value otherwise.
func (o *IdentityApplianceSecurityConfigDTO) GetSaltProperty() string {
	if o == nil || isNil(o.SaltProperty) {
		var ret string
		return ret
	}
	return *o.SaltProperty
}

// GetSaltPropertyOk returns a tuple with the SaltProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceSecurityConfigDTO) GetSaltPropertyOk() (*string, bool) {
	if o == nil || isNil(o.SaltProperty) {
    return nil, false
	}
	return o.SaltProperty, true
}

// HasSaltProperty returns a boolean if a field has been set.
func (o *IdentityApplianceSecurityConfigDTO) HasSaltProperty() bool {
	if o != nil && !isNil(o.SaltProperty) {
		return true
	}

	return false
}

// SetSaltProperty gets a reference to the given string and assigns it to the SaltProperty field.
func (o *IdentityApplianceSecurityConfigDTO) SetSaltProperty(v string) {
	o.SaltProperty = &v
}

// GetSaltValue returns the SaltValue field value if set, zero value otherwise.
func (o *IdentityApplianceSecurityConfigDTO) GetSaltValue() string {
	if o == nil || isNil(o.SaltValue) {
		var ret string
		return ret
	}
	return *o.SaltValue
}

// GetSaltValueOk returns a tuple with the SaltValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceSecurityConfigDTO) GetSaltValueOk() (*string, bool) {
	if o == nil || isNil(o.SaltValue) {
    return nil, false
	}
	return o.SaltValue, true
}

// HasSaltValue returns a boolean if a field has been set.
func (o *IdentityApplianceSecurityConfigDTO) HasSaltValue() bool {
	if o != nil && !isNil(o.SaltValue) {
		return true
	}

	return false
}

// SetSaltValue gets a reference to the given string and assigns it to the SaltValue field.
func (o *IdentityApplianceSecurityConfigDTO) SetSaltValue(v string) {
	o.SaltValue = &v
}

func (o IdentityApplianceSecurityConfigDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EncryptSensitiveData) {
		toSerialize["encryptSensitiveData"] = o.EncryptSensitiveData
	}
	if !isNil(o.Encryption) {
		toSerialize["encryption"] = o.Encryption
	}
	if !isNil(o.EncryptionConfig) {
		toSerialize["encryptionConfig"] = o.EncryptionConfig
	}
	if !isNil(o.EncryptionConfigFile) {
		toSerialize["encryptionConfigFile"] = o.EncryptionConfigFile
	}
	if !isNil(o.EncryptionPassword) {
		toSerialize["encryptionPassword"] = o.EncryptionPassword
	}
	if !isNil(o.ExternalConfig) {
		toSerialize["externalConfig"] = o.ExternalConfig
	}
	if !isNil(o.ExternalConfigFile) {
		toSerialize["externalConfigFile"] = o.ExternalConfigFile
	}
	if !isNil(o.PasswordProperty) {
		toSerialize["passwordProperty"] = o.PasswordProperty
	}
	if !isNil(o.Salt) {
		toSerialize["salt"] = o.Salt
	}
	if !isNil(o.SaltProperty) {
		toSerialize["saltProperty"] = o.SaltProperty
	}
	if !isNil(o.SaltValue) {
		toSerialize["saltValue"] = o.SaltValue
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IdentityApplianceSecurityConfigDTO) UnmarshalJSON(bytes []byte) (err error) {
	varIdentityApplianceSecurityConfigDTO := _IdentityApplianceSecurityConfigDTO{}

	if err = json.Unmarshal(bytes, &varIdentityApplianceSecurityConfigDTO); err == nil {
		*o = IdentityApplianceSecurityConfigDTO(varIdentityApplianceSecurityConfigDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "encryptSensitiveData")
		delete(additionalProperties, "encryption")
		delete(additionalProperties, "encryptionConfig")
		delete(additionalProperties, "encryptionConfigFile")
		delete(additionalProperties, "encryptionPassword")
		delete(additionalProperties, "externalConfig")
		delete(additionalProperties, "externalConfigFile")
		delete(additionalProperties, "passwordProperty")
		delete(additionalProperties, "salt")
		delete(additionalProperties, "saltProperty")
		delete(additionalProperties, "saltValue")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityApplianceSecurityConfigDTO struct {
	value *IdentityApplianceSecurityConfigDTO
	isSet bool
}

func (v NullableIdentityApplianceSecurityConfigDTO) Get() *IdentityApplianceSecurityConfigDTO {
	return v.value
}

func (v *NullableIdentityApplianceSecurityConfigDTO) Set(val *IdentityApplianceSecurityConfigDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityApplianceSecurityConfigDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityApplianceSecurityConfigDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityApplianceSecurityConfigDTO(val *IdentityApplianceSecurityConfigDTO) *NullableIdentityApplianceSecurityConfigDTO {
	return &NullableIdentityApplianceSecurityConfigDTO{value: val, isSet: true}
}

func (v NullableIdentityApplianceSecurityConfigDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityApplianceSecurityConfigDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


