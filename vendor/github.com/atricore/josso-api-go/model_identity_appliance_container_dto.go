/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.0-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// IdentityApplianceContainerDTO struct for IdentityApplianceContainerDTO
type IdentityApplianceContainerDTO struct {
	Appliance *IdentityApplianceDTO `json:"appliance,omitempty"`
	ExecEnvs []string `json:"execEnvs,omitempty"`
	IdSources []string `json:"idSources,omitempty"`
	Providers []string `json:"providers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityApplianceContainerDTO IdentityApplianceContainerDTO

// NewIdentityApplianceContainerDTO instantiates a new IdentityApplianceContainerDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityApplianceContainerDTO() *IdentityApplianceContainerDTO {
	this := IdentityApplianceContainerDTO{}
	return &this
}

// NewIdentityApplianceContainerDTOWithDefaults instantiates a new IdentityApplianceContainerDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityApplianceContainerDTOWithDefaults() *IdentityApplianceContainerDTO {
	this := IdentityApplianceContainerDTO{}
	return &this
}

// GetAppliance returns the Appliance field value if set, zero value otherwise.
func (o *IdentityApplianceContainerDTO) GetAppliance() IdentityApplianceDTO {
	if o == nil || isNil(o.Appliance) {
		var ret IdentityApplianceDTO
		return ret
	}
	return *o.Appliance
}

// GetApplianceOk returns a tuple with the Appliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceContainerDTO) GetApplianceOk() (*IdentityApplianceDTO, bool) {
	if o == nil || isNil(o.Appliance) {
    return nil, false
	}
	return o.Appliance, true
}

// HasAppliance returns a boolean if a field has been set.
func (o *IdentityApplianceContainerDTO) HasAppliance() bool {
	if o != nil && !isNil(o.Appliance) {
		return true
	}

	return false
}

// SetAppliance gets a reference to the given IdentityApplianceDTO and assigns it to the Appliance field.
func (o *IdentityApplianceContainerDTO) SetAppliance(v IdentityApplianceDTO) {
	o.Appliance = &v
}

// GetExecEnvs returns the ExecEnvs field value if set, zero value otherwise.
func (o *IdentityApplianceContainerDTO) GetExecEnvs() []string {
	if o == nil || isNil(o.ExecEnvs) {
		var ret []string
		return ret
	}
	return o.ExecEnvs
}

// GetExecEnvsOk returns a tuple with the ExecEnvs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceContainerDTO) GetExecEnvsOk() ([]string, bool) {
	if o == nil || isNil(o.ExecEnvs) {
    return nil, false
	}
	return o.ExecEnvs, true
}

// HasExecEnvs returns a boolean if a field has been set.
func (o *IdentityApplianceContainerDTO) HasExecEnvs() bool {
	if o != nil && !isNil(o.ExecEnvs) {
		return true
	}

	return false
}

// SetExecEnvs gets a reference to the given []string and assigns it to the ExecEnvs field.
func (o *IdentityApplianceContainerDTO) SetExecEnvs(v []string) {
	o.ExecEnvs = v
}

// GetIdSources returns the IdSources field value if set, zero value otherwise.
func (o *IdentityApplianceContainerDTO) GetIdSources() []string {
	if o == nil || isNil(o.IdSources) {
		var ret []string
		return ret
	}
	return o.IdSources
}

// GetIdSourcesOk returns a tuple with the IdSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceContainerDTO) GetIdSourcesOk() ([]string, bool) {
	if o == nil || isNil(o.IdSources) {
    return nil, false
	}
	return o.IdSources, true
}

// HasIdSources returns a boolean if a field has been set.
func (o *IdentityApplianceContainerDTO) HasIdSources() bool {
	if o != nil && !isNil(o.IdSources) {
		return true
	}

	return false
}

// SetIdSources gets a reference to the given []string and assigns it to the IdSources field.
func (o *IdentityApplianceContainerDTO) SetIdSources(v []string) {
	o.IdSources = v
}

// GetProviders returns the Providers field value if set, zero value otherwise.
func (o *IdentityApplianceContainerDTO) GetProviders() []string {
	if o == nil || isNil(o.Providers) {
		var ret []string
		return ret
	}
	return o.Providers
}

// GetProvidersOk returns a tuple with the Providers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityApplianceContainerDTO) GetProvidersOk() ([]string, bool) {
	if o == nil || isNil(o.Providers) {
    return nil, false
	}
	return o.Providers, true
}

// HasProviders returns a boolean if a field has been set.
func (o *IdentityApplianceContainerDTO) HasProviders() bool {
	if o != nil && !isNil(o.Providers) {
		return true
	}

	return false
}

// SetProviders gets a reference to the given []string and assigns it to the Providers field.
func (o *IdentityApplianceContainerDTO) SetProviders(v []string) {
	o.Providers = v
}

func (o IdentityApplianceContainerDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Appliance) {
		toSerialize["appliance"] = o.Appliance
	}
	if !isNil(o.ExecEnvs) {
		toSerialize["execEnvs"] = o.ExecEnvs
	}
	if !isNil(o.IdSources) {
		toSerialize["idSources"] = o.IdSources
	}
	if !isNil(o.Providers) {
		toSerialize["providers"] = o.Providers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IdentityApplianceContainerDTO) UnmarshalJSON(bytes []byte) (err error) {
	varIdentityApplianceContainerDTO := _IdentityApplianceContainerDTO{}

	if err = json.Unmarshal(bytes, &varIdentityApplianceContainerDTO); err == nil {
		*o = IdentityApplianceContainerDTO(varIdentityApplianceContainerDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appliance")
		delete(additionalProperties, "execEnvs")
		delete(additionalProperties, "idSources")
		delete(additionalProperties, "providers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityApplianceContainerDTO struct {
	value *IdentityApplianceContainerDTO
	isSet bool
}

func (v NullableIdentityApplianceContainerDTO) Get() *IdentityApplianceContainerDTO {
	return v.value
}

func (v *NullableIdentityApplianceContainerDTO) Set(val *IdentityApplianceContainerDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityApplianceContainerDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityApplianceContainerDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityApplianceContainerDTO(val *IdentityApplianceContainerDTO) *NullableIdentityApplianceContainerDTO {
	return &NullableIdentityApplianceContainerDTO{value: val, isSet: true}
}

func (v NullableIdentityApplianceContainerDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityApplianceContainerDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


