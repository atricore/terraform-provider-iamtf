/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.1-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// StoreJossoRsRes struct for StoreJossoRsRes
type StoreJossoRsRes struct {
	Error *string `json:"error,omitempty"`
	Resource *JOSSO1ResourceDTO `json:"resource,omitempty"`
	ValidationErrors []string `json:"validationErrors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StoreJossoRsRes StoreJossoRsRes

// NewStoreJossoRsRes instantiates a new StoreJossoRsRes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreJossoRsRes() *StoreJossoRsRes {
	this := StoreJossoRsRes{}
	return &this
}

// NewStoreJossoRsResWithDefaults instantiates a new StoreJossoRsRes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreJossoRsResWithDefaults() *StoreJossoRsRes {
	this := StoreJossoRsRes{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *StoreJossoRsRes) GetError() string {
	if o == nil || isNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreJossoRsRes) GetErrorOk() (*string, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *StoreJossoRsRes) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *StoreJossoRsRes) SetError(v string) {
	o.Error = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *StoreJossoRsRes) GetResource() JOSSO1ResourceDTO {
	if o == nil || isNil(o.Resource) {
		var ret JOSSO1ResourceDTO
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreJossoRsRes) GetResourceOk() (*JOSSO1ResourceDTO, bool) {
	if o == nil || isNil(o.Resource) {
    return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *StoreJossoRsRes) HasResource() bool {
	if o != nil && !isNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given JOSSO1ResourceDTO and assigns it to the Resource field.
func (o *StoreJossoRsRes) SetResource(v JOSSO1ResourceDTO) {
	o.Resource = &v
}

// GetValidationErrors returns the ValidationErrors field value if set, zero value otherwise.
func (o *StoreJossoRsRes) GetValidationErrors() []string {
	if o == nil || isNil(o.ValidationErrors) {
		var ret []string
		return ret
	}
	return o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreJossoRsRes) GetValidationErrorsOk() ([]string, bool) {
	if o == nil || isNil(o.ValidationErrors) {
    return nil, false
	}
	return o.ValidationErrors, true
}

// HasValidationErrors returns a boolean if a field has been set.
func (o *StoreJossoRsRes) HasValidationErrors() bool {
	if o != nil && !isNil(o.ValidationErrors) {
		return true
	}

	return false
}

// SetValidationErrors gets a reference to the given []string and assigns it to the ValidationErrors field.
func (o *StoreJossoRsRes) SetValidationErrors(v []string) {
	o.ValidationErrors = v
}

func (o StoreJossoRsRes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !isNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !isNil(o.ValidationErrors) {
		toSerialize["validationErrors"] = o.ValidationErrors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StoreJossoRsRes) UnmarshalJSON(bytes []byte) (err error) {
	varStoreJossoRsRes := _StoreJossoRsRes{}

	if err = json.Unmarshal(bytes, &varStoreJossoRsRes); err == nil {
		*o = StoreJossoRsRes(varStoreJossoRsRes)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "error")
		delete(additionalProperties, "resource")
		delete(additionalProperties, "validationErrors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoreJossoRsRes struct {
	value *StoreJossoRsRes
	isSet bool
}

func (v NullableStoreJossoRsRes) Get() *StoreJossoRsRes {
	return v.value
}

func (v *NullableStoreJossoRsRes) Set(val *StoreJossoRsRes) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreJossoRsRes) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreJossoRsRes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreJossoRsRes(val *StoreJossoRsRes) *NullableStoreJossoRsRes {
	return &NullableStoreJossoRsRes{value: val, isSet: true}
}

func (v NullableStoreJossoRsRes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreJossoRsRes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


