/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.0-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// OAuth2ClientDTO struct for OAuth2ClientDTO
type OAuth2ClientDTO struct {
	BaseURL *string `json:"baseURL,omitempty"`
	Id *string `json:"id,omitempty"`
	Secret *string `json:"secret,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OAuth2ClientDTO OAuth2ClientDTO

// NewOAuth2ClientDTO instantiates a new OAuth2ClientDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuth2ClientDTO() *OAuth2ClientDTO {
	this := OAuth2ClientDTO{}
	return &this
}

// NewOAuth2ClientDTOWithDefaults instantiates a new OAuth2ClientDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuth2ClientDTOWithDefaults() *OAuth2ClientDTO {
	this := OAuth2ClientDTO{}
	return &this
}

// GetBaseURL returns the BaseURL field value if set, zero value otherwise.
func (o *OAuth2ClientDTO) GetBaseURL() string {
	if o == nil || isNil(o.BaseURL) {
		var ret string
		return ret
	}
	return *o.BaseURL
}

// GetBaseURLOk returns a tuple with the BaseURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ClientDTO) GetBaseURLOk() (*string, bool) {
	if o == nil || isNil(o.BaseURL) {
    return nil, false
	}
	return o.BaseURL, true
}

// HasBaseURL returns a boolean if a field has been set.
func (o *OAuth2ClientDTO) HasBaseURL() bool {
	if o != nil && !isNil(o.BaseURL) {
		return true
	}

	return false
}

// SetBaseURL gets a reference to the given string and assigns it to the BaseURL field.
func (o *OAuth2ClientDTO) SetBaseURL(v string) {
	o.BaseURL = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OAuth2ClientDTO) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ClientDTO) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OAuth2ClientDTO) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OAuth2ClientDTO) SetId(v string) {
	o.Id = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *OAuth2ClientDTO) GetSecret() string {
	if o == nil || isNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ClientDTO) GetSecretOk() (*string, bool) {
	if o == nil || isNil(o.Secret) {
    return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *OAuth2ClientDTO) HasSecret() bool {
	if o != nil && !isNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *OAuth2ClientDTO) SetSecret(v string) {
	o.Secret = &v
}

func (o OAuth2ClientDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BaseURL) {
		toSerialize["baseURL"] = o.BaseURL
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OAuth2ClientDTO) UnmarshalJSON(bytes []byte) (err error) {
	varOAuth2ClientDTO := _OAuth2ClientDTO{}

	if err = json.Unmarshal(bytes, &varOAuth2ClientDTO); err == nil {
		*o = OAuth2ClientDTO(varOAuth2ClientDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "baseURL")
		delete(additionalProperties, "id")
		delete(additionalProperties, "secret")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOAuth2ClientDTO struct {
	value *OAuth2ClientDTO
	isSet bool
}

func (v NullableOAuth2ClientDTO) Get() *OAuth2ClientDTO {
	return v.value
}

func (v *NullableOAuth2ClientDTO) Set(val *OAuth2ClientDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth2ClientDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth2ClientDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth2ClientDTO(val *OAuth2ClientDTO) *NullableOAuth2ClientDTO {
	return &NullableOAuth2ClientDTO{value: val, isSet: true}
}

func (v NullableOAuth2ClientDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth2ClientDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


