/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.0-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// ProviderContainerDTO struct for ProviderContainerDTO
type ProviderContainerDTO struct {
	FederatedProvider *FederatedProviderDTO `json:"federatedProvider,omitempty"`
	Location *string `json:"location,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProviderContainerDTO ProviderContainerDTO

// NewProviderContainerDTO instantiates a new ProviderContainerDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderContainerDTO() *ProviderContainerDTO {
	this := ProviderContainerDTO{}
	return &this
}

// NewProviderContainerDTOWithDefaults instantiates a new ProviderContainerDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderContainerDTOWithDefaults() *ProviderContainerDTO {
	this := ProviderContainerDTO{}
	return &this
}

// GetFederatedProvider returns the FederatedProvider field value if set, zero value otherwise.
func (o *ProviderContainerDTO) GetFederatedProvider() FederatedProviderDTO {
	if o == nil || isNil(o.FederatedProvider) {
		var ret FederatedProviderDTO
		return ret
	}
	return *o.FederatedProvider
}

// GetFederatedProviderOk returns a tuple with the FederatedProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderContainerDTO) GetFederatedProviderOk() (*FederatedProviderDTO, bool) {
	if o == nil || isNil(o.FederatedProvider) {
    return nil, false
	}
	return o.FederatedProvider, true
}

// HasFederatedProvider returns a boolean if a field has been set.
func (o *ProviderContainerDTO) HasFederatedProvider() bool {
	if o != nil && !isNil(o.FederatedProvider) {
		return true
	}

	return false
}

// SetFederatedProvider gets a reference to the given FederatedProviderDTO and assigns it to the FederatedProvider field.
func (o *ProviderContainerDTO) SetFederatedProvider(v FederatedProviderDTO) {
	o.FederatedProvider = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ProviderContainerDTO) GetLocation() string {
	if o == nil || isNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderContainerDTO) GetLocationOk() (*string, bool) {
	if o == nil || isNil(o.Location) {
    return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ProviderContainerDTO) HasLocation() bool {
	if o != nil && !isNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *ProviderContainerDTO) SetLocation(v string) {
	o.Location = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProviderContainerDTO) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderContainerDTO) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProviderContainerDTO) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProviderContainerDTO) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProviderContainerDTO) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderContainerDTO) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProviderContainerDTO) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ProviderContainerDTO) SetType(v string) {
	o.Type = &v
}

func (o ProviderContainerDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.FederatedProvider) {
		toSerialize["federatedProvider"] = o.FederatedProvider
	}
	if !isNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ProviderContainerDTO) UnmarshalJSON(bytes []byte) (err error) {
	varProviderContainerDTO := _ProviderContainerDTO{}

	if err = json.Unmarshal(bytes, &varProviderContainerDTO); err == nil {
		*o = ProviderContainerDTO(varProviderContainerDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "federatedProvider")
		delete(additionalProperties, "location")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProviderContainerDTO struct {
	value *ProviderContainerDTO
	isSet bool
}

func (v NullableProviderContainerDTO) Get() *ProviderContainerDTO {
	return v.value
}

func (v *NullableProviderContainerDTO) Set(val *ProviderContainerDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderContainerDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderContainerDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderContainerDTO(val *ProviderContainerDTO) *NullableProviderContainerDTO {
	return &NullableProviderContainerDTO{value: val, isSet: true}
}

func (v NullableProviderContainerDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderContainerDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


