/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.0-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// CalcLayoutRes struct for CalcLayoutRes
type CalcLayoutRes struct {
	Error *string `json:"error,omitempty"`
	Export *string `json:"export,omitempty"`
	ValidationErrors []string `json:"validationErrors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CalcLayoutRes CalcLayoutRes

// NewCalcLayoutRes instantiates a new CalcLayoutRes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalcLayoutRes() *CalcLayoutRes {
	this := CalcLayoutRes{}
	return &this
}

// NewCalcLayoutResWithDefaults instantiates a new CalcLayoutRes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalcLayoutResWithDefaults() *CalcLayoutRes {
	this := CalcLayoutRes{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *CalcLayoutRes) GetError() string {
	if o == nil || isNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalcLayoutRes) GetErrorOk() (*string, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *CalcLayoutRes) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *CalcLayoutRes) SetError(v string) {
	o.Error = &v
}

// GetExport returns the Export field value if set, zero value otherwise.
func (o *CalcLayoutRes) GetExport() string {
	if o == nil || isNil(o.Export) {
		var ret string
		return ret
	}
	return *o.Export
}

// GetExportOk returns a tuple with the Export field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalcLayoutRes) GetExportOk() (*string, bool) {
	if o == nil || isNil(o.Export) {
    return nil, false
	}
	return o.Export, true
}

// HasExport returns a boolean if a field has been set.
func (o *CalcLayoutRes) HasExport() bool {
	if o != nil && !isNil(o.Export) {
		return true
	}

	return false
}

// SetExport gets a reference to the given string and assigns it to the Export field.
func (o *CalcLayoutRes) SetExport(v string) {
	o.Export = &v
}

// GetValidationErrors returns the ValidationErrors field value if set, zero value otherwise.
func (o *CalcLayoutRes) GetValidationErrors() []string {
	if o == nil || isNil(o.ValidationErrors) {
		var ret []string
		return ret
	}
	return o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalcLayoutRes) GetValidationErrorsOk() ([]string, bool) {
	if o == nil || isNil(o.ValidationErrors) {
    return nil, false
	}
	return o.ValidationErrors, true
}

// HasValidationErrors returns a boolean if a field has been set.
func (o *CalcLayoutRes) HasValidationErrors() bool {
	if o != nil && !isNil(o.ValidationErrors) {
		return true
	}

	return false
}

// SetValidationErrors gets a reference to the given []string and assigns it to the ValidationErrors field.
func (o *CalcLayoutRes) SetValidationErrors(v []string) {
	o.ValidationErrors = v
}

func (o CalcLayoutRes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !isNil(o.Export) {
		toSerialize["export"] = o.Export
	}
	if !isNil(o.ValidationErrors) {
		toSerialize["validationErrors"] = o.ValidationErrors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CalcLayoutRes) UnmarshalJSON(bytes []byte) (err error) {
	varCalcLayoutRes := _CalcLayoutRes{}

	if err = json.Unmarshal(bytes, &varCalcLayoutRes); err == nil {
		*o = CalcLayoutRes(varCalcLayoutRes)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "error")
		delete(additionalProperties, "export")
		delete(additionalProperties, "validationErrors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCalcLayoutRes struct {
	value *CalcLayoutRes
	isSet bool
}

func (v NullableCalcLayoutRes) Get() *CalcLayoutRes {
	return v.value
}

func (v *NullableCalcLayoutRes) Set(val *CalcLayoutRes) {
	v.value = val
	v.isSet = true
}

func (v NullableCalcLayoutRes) IsSet() bool {
	return v.isSet
}

func (v *NullableCalcLayoutRes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalcLayoutRes(val *CalcLayoutRes) *NullableCalcLayoutRes {
	return &NullableCalcLayoutRes{value: val, isSet: true}
}

func (v NullableCalcLayoutRes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalcLayoutRes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


