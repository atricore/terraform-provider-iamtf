/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.1-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// CustomClassDTO struct for CustomClassDTO
type CustomClassDTO struct {
	Cardinality *string `json:"cardinality,omitempty"`
	Fqcn *string `json:"fqcn,omitempty"`
	OsgiFilter *string `json:"osgiFilter,omitempty"`
	OsgiService *bool `json:"osgiService,omitempty"`
	Properties []CustomClassPropertyDTO `json:"properties,omitempty"`
	TimeoutSecs *int32 `json:"timeoutSecs,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomClassDTO CustomClassDTO

// NewCustomClassDTO instantiates a new CustomClassDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomClassDTO() *CustomClassDTO {
	this := CustomClassDTO{}
	return &this
}

// NewCustomClassDTOWithDefaults instantiates a new CustomClassDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomClassDTOWithDefaults() *CustomClassDTO {
	this := CustomClassDTO{}
	return &this
}

// GetCardinality returns the Cardinality field value if set, zero value otherwise.
func (o *CustomClassDTO) GetCardinality() string {
	if o == nil || isNil(o.Cardinality) {
		var ret string
		return ret
	}
	return *o.Cardinality
}

// GetCardinalityOk returns a tuple with the Cardinality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomClassDTO) GetCardinalityOk() (*string, bool) {
	if o == nil || isNil(o.Cardinality) {
    return nil, false
	}
	return o.Cardinality, true
}

// HasCardinality returns a boolean if a field has been set.
func (o *CustomClassDTO) HasCardinality() bool {
	if o != nil && !isNil(o.Cardinality) {
		return true
	}

	return false
}

// SetCardinality gets a reference to the given string and assigns it to the Cardinality field.
func (o *CustomClassDTO) SetCardinality(v string) {
	o.Cardinality = &v
}

// GetFqcn returns the Fqcn field value if set, zero value otherwise.
func (o *CustomClassDTO) GetFqcn() string {
	if o == nil || isNil(o.Fqcn) {
		var ret string
		return ret
	}
	return *o.Fqcn
}

// GetFqcnOk returns a tuple with the Fqcn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomClassDTO) GetFqcnOk() (*string, bool) {
	if o == nil || isNil(o.Fqcn) {
    return nil, false
	}
	return o.Fqcn, true
}

// HasFqcn returns a boolean if a field has been set.
func (o *CustomClassDTO) HasFqcn() bool {
	if o != nil && !isNil(o.Fqcn) {
		return true
	}

	return false
}

// SetFqcn gets a reference to the given string and assigns it to the Fqcn field.
func (o *CustomClassDTO) SetFqcn(v string) {
	o.Fqcn = &v
}

// GetOsgiFilter returns the OsgiFilter field value if set, zero value otherwise.
func (o *CustomClassDTO) GetOsgiFilter() string {
	if o == nil || isNil(o.OsgiFilter) {
		var ret string
		return ret
	}
	return *o.OsgiFilter
}

// GetOsgiFilterOk returns a tuple with the OsgiFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomClassDTO) GetOsgiFilterOk() (*string, bool) {
	if o == nil || isNil(o.OsgiFilter) {
    return nil, false
	}
	return o.OsgiFilter, true
}

// HasOsgiFilter returns a boolean if a field has been set.
func (o *CustomClassDTO) HasOsgiFilter() bool {
	if o != nil && !isNil(o.OsgiFilter) {
		return true
	}

	return false
}

// SetOsgiFilter gets a reference to the given string and assigns it to the OsgiFilter field.
func (o *CustomClassDTO) SetOsgiFilter(v string) {
	o.OsgiFilter = &v
}

// GetOsgiService returns the OsgiService field value if set, zero value otherwise.
func (o *CustomClassDTO) GetOsgiService() bool {
	if o == nil || isNil(o.OsgiService) {
		var ret bool
		return ret
	}
	return *o.OsgiService
}

// GetOsgiServiceOk returns a tuple with the OsgiService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomClassDTO) GetOsgiServiceOk() (*bool, bool) {
	if o == nil || isNil(o.OsgiService) {
    return nil, false
	}
	return o.OsgiService, true
}

// HasOsgiService returns a boolean if a field has been set.
func (o *CustomClassDTO) HasOsgiService() bool {
	if o != nil && !isNil(o.OsgiService) {
		return true
	}

	return false
}

// SetOsgiService gets a reference to the given bool and assigns it to the OsgiService field.
func (o *CustomClassDTO) SetOsgiService(v bool) {
	o.OsgiService = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *CustomClassDTO) GetProperties() []CustomClassPropertyDTO {
	if o == nil || isNil(o.Properties) {
		var ret []CustomClassPropertyDTO
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomClassDTO) GetPropertiesOk() ([]CustomClassPropertyDTO, bool) {
	if o == nil || isNil(o.Properties) {
    return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *CustomClassDTO) HasProperties() bool {
	if o != nil && !isNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []CustomClassPropertyDTO and assigns it to the Properties field.
func (o *CustomClassDTO) SetProperties(v []CustomClassPropertyDTO) {
	o.Properties = v
}

// GetTimeoutSecs returns the TimeoutSecs field value if set, zero value otherwise.
func (o *CustomClassDTO) GetTimeoutSecs() int32 {
	if o == nil || isNil(o.TimeoutSecs) {
		var ret int32
		return ret
	}
	return *o.TimeoutSecs
}

// GetTimeoutSecsOk returns a tuple with the TimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomClassDTO) GetTimeoutSecsOk() (*int32, bool) {
	if o == nil || isNil(o.TimeoutSecs) {
    return nil, false
	}
	return o.TimeoutSecs, true
}

// HasTimeoutSecs returns a boolean if a field has been set.
func (o *CustomClassDTO) HasTimeoutSecs() bool {
	if o != nil && !isNil(o.TimeoutSecs) {
		return true
	}

	return false
}

// SetTimeoutSecs gets a reference to the given int32 and assigns it to the TimeoutSecs field.
func (o *CustomClassDTO) SetTimeoutSecs(v int32) {
	o.TimeoutSecs = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CustomClassDTO) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomClassDTO) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CustomClassDTO) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CustomClassDTO) SetType(v string) {
	o.Type = &v
}

func (o CustomClassDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Cardinality) {
		toSerialize["cardinality"] = o.Cardinality
	}
	if !isNil(o.Fqcn) {
		toSerialize["fqcn"] = o.Fqcn
	}
	if !isNil(o.OsgiFilter) {
		toSerialize["osgiFilter"] = o.OsgiFilter
	}
	if !isNil(o.OsgiService) {
		toSerialize["osgiService"] = o.OsgiService
	}
	if !isNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !isNil(o.TimeoutSecs) {
		toSerialize["timeoutSecs"] = o.TimeoutSecs
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CustomClassDTO) UnmarshalJSON(bytes []byte) (err error) {
	varCustomClassDTO := _CustomClassDTO{}

	if err = json.Unmarshal(bytes, &varCustomClassDTO); err == nil {
		*o = CustomClassDTO(varCustomClassDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "cardinality")
		delete(additionalProperties, "fqcn")
		delete(additionalProperties, "osgiFilter")
		delete(additionalProperties, "osgiService")
		delete(additionalProperties, "properties")
		delete(additionalProperties, "timeoutSecs")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomClassDTO struct {
	value *CustomClassDTO
	isSet bool
}

func (v NullableCustomClassDTO) Get() *CustomClassDTO {
	return v.value
}

func (v *NullableCustomClassDTO) Set(val *CustomClassDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomClassDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomClassDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomClassDTO(val *CustomClassDTO) *NullableCustomClassDTO {
	return &NullableCustomClassDTO{value: val, isSet: true}
}

func (v NullableCustomClassDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomClassDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


