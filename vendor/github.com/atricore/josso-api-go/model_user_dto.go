/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.1-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
	"time"
)

// UserDTO struct for UserDTO
type UserDTO struct {
	AccountDisabled *bool `json:"accountDisabled,omitempty"`
	AccountExpirationDate *time.Time `json:"accountExpirationDate,omitempty"`
	AccountExpires *bool `json:"accountExpires,omitempty"`
	AllowUserToChangePassword *bool `json:"allowUserToChangePassword,omitempty"`
	AutomaticallyGeneratePassword *bool `json:"automaticallyGeneratePassword,omitempty"`
	BusinessCategory *string `json:"businessCategory,omitempty"`
	CommonName *string `json:"commonName,omitempty"`
	CountryName *string `json:"countryName,omitempty"`
	DaysBeforeExpiration *int32 `json:"daysBeforeExpiration,omitempty"`
	DaysBetweenChanges *int32 `json:"daysBetweenChanges,omitempty"`
	DistinguishedName *string `json:"distinguishedName,omitempty"`
	Email *string `json:"email,omitempty"`
	EmailNewPasword *bool `json:"emailNewPasword,omitempty"`
	ExtraAttributes []AttributeValueDTO `json:"extraAttributes,omitempty"`
	FacsimilTelephoneNumber *string `json:"facsimilTelephoneNumber,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	ForcePeriodicPasswordChanges *bool `json:"forcePeriodicPasswordChanges,omitempty"`
	GenerationQualifier *string `json:"generationQualifier,omitempty"`
	GivenName *string `json:"givenName,omitempty"`
	Groups []GroupDTO `json:"groups,omitempty"`
	Id *string `json:"id,omitempty"`
	Initials *string `json:"initials,omitempty"`
	Language *string `json:"language,omitempty"`
	LimitSimultaneousLogin *bool `json:"limitSimultaneousLogin,omitempty"`
	LocalityName *string `json:"localityName,omitempty"`
	MaximunLogins *int32 `json:"maximunLogins,omitempty"`
	NotifyPasswordExpiration *bool `json:"notifyPasswordExpiration,omitempty"`
	OrganizationName *string `json:"organizationName,omitempty"`
	OrganizationUnitName *string `json:"organizationUnitName,omitempty"`
	PasswordExpirationDate *time.Time `json:"passwordExpirationDate,omitempty"`
	PersonalTitle *string `json:"personalTitle,omitempty"`
	PostOfficeBox *string `json:"postOfficeBox,omitempty"`
	PostalAddress *string `json:"postalAddress,omitempty"`
	PostalCode *string `json:"postalCode,omitempty"`
	PreventNewSession *bool `json:"preventNewSession,omitempty"`
	StateOrProvinceName *string `json:"stateOrProvinceName,omitempty"`
	StreetAddress *string `json:"streetAddress,omitempty"`
	Surename *string `json:"surename,omitempty"`
	TelephoneNumber *string `json:"telephoneNumber,omitempty"`
	TerminatePreviousSession *bool `json:"terminatePreviousSession,omitempty"`
	UserCertificate []string `json:"userCertificate,omitempty"`
	UserName *string `json:"userName,omitempty"`
	UserPassword *string `json:"userPassword,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserDTO UserDTO

// NewUserDTO instantiates a new UserDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDTO() *UserDTO {
	this := UserDTO{}
	return &this
}

// NewUserDTOWithDefaults instantiates a new UserDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDTOWithDefaults() *UserDTO {
	this := UserDTO{}
	return &this
}

// GetAccountDisabled returns the AccountDisabled field value if set, zero value otherwise.
func (o *UserDTO) GetAccountDisabled() bool {
	if o == nil || isNil(o.AccountDisabled) {
		var ret bool
		return ret
	}
	return *o.AccountDisabled
}

// GetAccountDisabledOk returns a tuple with the AccountDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetAccountDisabledOk() (*bool, bool) {
	if o == nil || isNil(o.AccountDisabled) {
    return nil, false
	}
	return o.AccountDisabled, true
}

// HasAccountDisabled returns a boolean if a field has been set.
func (o *UserDTO) HasAccountDisabled() bool {
	if o != nil && !isNil(o.AccountDisabled) {
		return true
	}

	return false
}

// SetAccountDisabled gets a reference to the given bool and assigns it to the AccountDisabled field.
func (o *UserDTO) SetAccountDisabled(v bool) {
	o.AccountDisabled = &v
}

// GetAccountExpirationDate returns the AccountExpirationDate field value if set, zero value otherwise.
func (o *UserDTO) GetAccountExpirationDate() time.Time {
	if o == nil || isNil(o.AccountExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.AccountExpirationDate
}

// GetAccountExpirationDateOk returns a tuple with the AccountExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetAccountExpirationDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.AccountExpirationDate) {
    return nil, false
	}
	return o.AccountExpirationDate, true
}

// HasAccountExpirationDate returns a boolean if a field has been set.
func (o *UserDTO) HasAccountExpirationDate() bool {
	if o != nil && !isNil(o.AccountExpirationDate) {
		return true
	}

	return false
}

// SetAccountExpirationDate gets a reference to the given time.Time and assigns it to the AccountExpirationDate field.
func (o *UserDTO) SetAccountExpirationDate(v time.Time) {
	o.AccountExpirationDate = &v
}

// GetAccountExpires returns the AccountExpires field value if set, zero value otherwise.
func (o *UserDTO) GetAccountExpires() bool {
	if o == nil || isNil(o.AccountExpires) {
		var ret bool
		return ret
	}
	return *o.AccountExpires
}

// GetAccountExpiresOk returns a tuple with the AccountExpires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetAccountExpiresOk() (*bool, bool) {
	if o == nil || isNil(o.AccountExpires) {
    return nil, false
	}
	return o.AccountExpires, true
}

// HasAccountExpires returns a boolean if a field has been set.
func (o *UserDTO) HasAccountExpires() bool {
	if o != nil && !isNil(o.AccountExpires) {
		return true
	}

	return false
}

// SetAccountExpires gets a reference to the given bool and assigns it to the AccountExpires field.
func (o *UserDTO) SetAccountExpires(v bool) {
	o.AccountExpires = &v
}

// GetAllowUserToChangePassword returns the AllowUserToChangePassword field value if set, zero value otherwise.
func (o *UserDTO) GetAllowUserToChangePassword() bool {
	if o == nil || isNil(o.AllowUserToChangePassword) {
		var ret bool
		return ret
	}
	return *o.AllowUserToChangePassword
}

// GetAllowUserToChangePasswordOk returns a tuple with the AllowUserToChangePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetAllowUserToChangePasswordOk() (*bool, bool) {
	if o == nil || isNil(o.AllowUserToChangePassword) {
    return nil, false
	}
	return o.AllowUserToChangePassword, true
}

// HasAllowUserToChangePassword returns a boolean if a field has been set.
func (o *UserDTO) HasAllowUserToChangePassword() bool {
	if o != nil && !isNil(o.AllowUserToChangePassword) {
		return true
	}

	return false
}

// SetAllowUserToChangePassword gets a reference to the given bool and assigns it to the AllowUserToChangePassword field.
func (o *UserDTO) SetAllowUserToChangePassword(v bool) {
	o.AllowUserToChangePassword = &v
}

// GetAutomaticallyGeneratePassword returns the AutomaticallyGeneratePassword field value if set, zero value otherwise.
func (o *UserDTO) GetAutomaticallyGeneratePassword() bool {
	if o == nil || isNil(o.AutomaticallyGeneratePassword) {
		var ret bool
		return ret
	}
	return *o.AutomaticallyGeneratePassword
}

// GetAutomaticallyGeneratePasswordOk returns a tuple with the AutomaticallyGeneratePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetAutomaticallyGeneratePasswordOk() (*bool, bool) {
	if o == nil || isNil(o.AutomaticallyGeneratePassword) {
    return nil, false
	}
	return o.AutomaticallyGeneratePassword, true
}

// HasAutomaticallyGeneratePassword returns a boolean if a field has been set.
func (o *UserDTO) HasAutomaticallyGeneratePassword() bool {
	if o != nil && !isNil(o.AutomaticallyGeneratePassword) {
		return true
	}

	return false
}

// SetAutomaticallyGeneratePassword gets a reference to the given bool and assigns it to the AutomaticallyGeneratePassword field.
func (o *UserDTO) SetAutomaticallyGeneratePassword(v bool) {
	o.AutomaticallyGeneratePassword = &v
}

// GetBusinessCategory returns the BusinessCategory field value if set, zero value otherwise.
func (o *UserDTO) GetBusinessCategory() string {
	if o == nil || isNil(o.BusinessCategory) {
		var ret string
		return ret
	}
	return *o.BusinessCategory
}

// GetBusinessCategoryOk returns a tuple with the BusinessCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetBusinessCategoryOk() (*string, bool) {
	if o == nil || isNil(o.BusinessCategory) {
    return nil, false
	}
	return o.BusinessCategory, true
}

// HasBusinessCategory returns a boolean if a field has been set.
func (o *UserDTO) HasBusinessCategory() bool {
	if o != nil && !isNil(o.BusinessCategory) {
		return true
	}

	return false
}

// SetBusinessCategory gets a reference to the given string and assigns it to the BusinessCategory field.
func (o *UserDTO) SetBusinessCategory(v string) {
	o.BusinessCategory = &v
}

// GetCommonName returns the CommonName field value if set, zero value otherwise.
func (o *UserDTO) GetCommonName() string {
	if o == nil || isNil(o.CommonName) {
		var ret string
		return ret
	}
	return *o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetCommonNameOk() (*string, bool) {
	if o == nil || isNil(o.CommonName) {
    return nil, false
	}
	return o.CommonName, true
}

// HasCommonName returns a boolean if a field has been set.
func (o *UserDTO) HasCommonName() bool {
	if o != nil && !isNil(o.CommonName) {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given string and assigns it to the CommonName field.
func (o *UserDTO) SetCommonName(v string) {
	o.CommonName = &v
}

// GetCountryName returns the CountryName field value if set, zero value otherwise.
func (o *UserDTO) GetCountryName() string {
	if o == nil || isNil(o.CountryName) {
		var ret string
		return ret
	}
	return *o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetCountryNameOk() (*string, bool) {
	if o == nil || isNil(o.CountryName) {
    return nil, false
	}
	return o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *UserDTO) HasCountryName() bool {
	if o != nil && !isNil(o.CountryName) {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given string and assigns it to the CountryName field.
func (o *UserDTO) SetCountryName(v string) {
	o.CountryName = &v
}

// GetDaysBeforeExpiration returns the DaysBeforeExpiration field value if set, zero value otherwise.
func (o *UserDTO) GetDaysBeforeExpiration() int32 {
	if o == nil || isNil(o.DaysBeforeExpiration) {
		var ret int32
		return ret
	}
	return *o.DaysBeforeExpiration
}

// GetDaysBeforeExpirationOk returns a tuple with the DaysBeforeExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetDaysBeforeExpirationOk() (*int32, bool) {
	if o == nil || isNil(o.DaysBeforeExpiration) {
    return nil, false
	}
	return o.DaysBeforeExpiration, true
}

// HasDaysBeforeExpiration returns a boolean if a field has been set.
func (o *UserDTO) HasDaysBeforeExpiration() bool {
	if o != nil && !isNil(o.DaysBeforeExpiration) {
		return true
	}

	return false
}

// SetDaysBeforeExpiration gets a reference to the given int32 and assigns it to the DaysBeforeExpiration field.
func (o *UserDTO) SetDaysBeforeExpiration(v int32) {
	o.DaysBeforeExpiration = &v
}

// GetDaysBetweenChanges returns the DaysBetweenChanges field value if set, zero value otherwise.
func (o *UserDTO) GetDaysBetweenChanges() int32 {
	if o == nil || isNil(o.DaysBetweenChanges) {
		var ret int32
		return ret
	}
	return *o.DaysBetweenChanges
}

// GetDaysBetweenChangesOk returns a tuple with the DaysBetweenChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetDaysBetweenChangesOk() (*int32, bool) {
	if o == nil || isNil(o.DaysBetweenChanges) {
    return nil, false
	}
	return o.DaysBetweenChanges, true
}

// HasDaysBetweenChanges returns a boolean if a field has been set.
func (o *UserDTO) HasDaysBetweenChanges() bool {
	if o != nil && !isNil(o.DaysBetweenChanges) {
		return true
	}

	return false
}

// SetDaysBetweenChanges gets a reference to the given int32 and assigns it to the DaysBetweenChanges field.
func (o *UserDTO) SetDaysBetweenChanges(v int32) {
	o.DaysBetweenChanges = &v
}

// GetDistinguishedName returns the DistinguishedName field value if set, zero value otherwise.
func (o *UserDTO) GetDistinguishedName() string {
	if o == nil || isNil(o.DistinguishedName) {
		var ret string
		return ret
	}
	return *o.DistinguishedName
}

// GetDistinguishedNameOk returns a tuple with the DistinguishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetDistinguishedNameOk() (*string, bool) {
	if o == nil || isNil(o.DistinguishedName) {
    return nil, false
	}
	return o.DistinguishedName, true
}

// HasDistinguishedName returns a boolean if a field has been set.
func (o *UserDTO) HasDistinguishedName() bool {
	if o != nil && !isNil(o.DistinguishedName) {
		return true
	}

	return false
}

// SetDistinguishedName gets a reference to the given string and assigns it to the DistinguishedName field.
func (o *UserDTO) SetDistinguishedName(v string) {
	o.DistinguishedName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserDTO) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
    return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserDTO) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserDTO) SetEmail(v string) {
	o.Email = &v
}

// GetEmailNewPasword returns the EmailNewPasword field value if set, zero value otherwise.
func (o *UserDTO) GetEmailNewPasword() bool {
	if o == nil || isNil(o.EmailNewPasword) {
		var ret bool
		return ret
	}
	return *o.EmailNewPasword
}

// GetEmailNewPaswordOk returns a tuple with the EmailNewPasword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetEmailNewPaswordOk() (*bool, bool) {
	if o == nil || isNil(o.EmailNewPasword) {
    return nil, false
	}
	return o.EmailNewPasword, true
}

// HasEmailNewPasword returns a boolean if a field has been set.
func (o *UserDTO) HasEmailNewPasword() bool {
	if o != nil && !isNil(o.EmailNewPasword) {
		return true
	}

	return false
}

// SetEmailNewPasword gets a reference to the given bool and assigns it to the EmailNewPasword field.
func (o *UserDTO) SetEmailNewPasword(v bool) {
	o.EmailNewPasword = &v
}

// GetExtraAttributes returns the ExtraAttributes field value if set, zero value otherwise.
func (o *UserDTO) GetExtraAttributes() []AttributeValueDTO {
	if o == nil || isNil(o.ExtraAttributes) {
		var ret []AttributeValueDTO
		return ret
	}
	return o.ExtraAttributes
}

// GetExtraAttributesOk returns a tuple with the ExtraAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetExtraAttributesOk() ([]AttributeValueDTO, bool) {
	if o == nil || isNil(o.ExtraAttributes) {
    return nil, false
	}
	return o.ExtraAttributes, true
}

// HasExtraAttributes returns a boolean if a field has been set.
func (o *UserDTO) HasExtraAttributes() bool {
	if o != nil && !isNil(o.ExtraAttributes) {
		return true
	}

	return false
}

// SetExtraAttributes gets a reference to the given []AttributeValueDTO and assigns it to the ExtraAttributes field.
func (o *UserDTO) SetExtraAttributes(v []AttributeValueDTO) {
	o.ExtraAttributes = v
}

// GetFacsimilTelephoneNumber returns the FacsimilTelephoneNumber field value if set, zero value otherwise.
func (o *UserDTO) GetFacsimilTelephoneNumber() string {
	if o == nil || isNil(o.FacsimilTelephoneNumber) {
		var ret string
		return ret
	}
	return *o.FacsimilTelephoneNumber
}

// GetFacsimilTelephoneNumberOk returns a tuple with the FacsimilTelephoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetFacsimilTelephoneNumberOk() (*string, bool) {
	if o == nil || isNil(o.FacsimilTelephoneNumber) {
    return nil, false
	}
	return o.FacsimilTelephoneNumber, true
}

// HasFacsimilTelephoneNumber returns a boolean if a field has been set.
func (o *UserDTO) HasFacsimilTelephoneNumber() bool {
	if o != nil && !isNil(o.FacsimilTelephoneNumber) {
		return true
	}

	return false
}

// SetFacsimilTelephoneNumber gets a reference to the given string and assigns it to the FacsimilTelephoneNumber field.
func (o *UserDTO) SetFacsimilTelephoneNumber(v string) {
	o.FacsimilTelephoneNumber = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UserDTO) GetFirstName() string {
	if o == nil || isNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetFirstNameOk() (*string, bool) {
	if o == nil || isNil(o.FirstName) {
    return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UserDTO) HasFirstName() bool {
	if o != nil && !isNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UserDTO) SetFirstName(v string) {
	o.FirstName = &v
}

// GetForcePeriodicPasswordChanges returns the ForcePeriodicPasswordChanges field value if set, zero value otherwise.
func (o *UserDTO) GetForcePeriodicPasswordChanges() bool {
	if o == nil || isNil(o.ForcePeriodicPasswordChanges) {
		var ret bool
		return ret
	}
	return *o.ForcePeriodicPasswordChanges
}

// GetForcePeriodicPasswordChangesOk returns a tuple with the ForcePeriodicPasswordChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetForcePeriodicPasswordChangesOk() (*bool, bool) {
	if o == nil || isNil(o.ForcePeriodicPasswordChanges) {
    return nil, false
	}
	return o.ForcePeriodicPasswordChanges, true
}

// HasForcePeriodicPasswordChanges returns a boolean if a field has been set.
func (o *UserDTO) HasForcePeriodicPasswordChanges() bool {
	if o != nil && !isNil(o.ForcePeriodicPasswordChanges) {
		return true
	}

	return false
}

// SetForcePeriodicPasswordChanges gets a reference to the given bool and assigns it to the ForcePeriodicPasswordChanges field.
func (o *UserDTO) SetForcePeriodicPasswordChanges(v bool) {
	o.ForcePeriodicPasswordChanges = &v
}

// GetGenerationQualifier returns the GenerationQualifier field value if set, zero value otherwise.
func (o *UserDTO) GetGenerationQualifier() string {
	if o == nil || isNil(o.GenerationQualifier) {
		var ret string
		return ret
	}
	return *o.GenerationQualifier
}

// GetGenerationQualifierOk returns a tuple with the GenerationQualifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetGenerationQualifierOk() (*string, bool) {
	if o == nil || isNil(o.GenerationQualifier) {
    return nil, false
	}
	return o.GenerationQualifier, true
}

// HasGenerationQualifier returns a boolean if a field has been set.
func (o *UserDTO) HasGenerationQualifier() bool {
	if o != nil && !isNil(o.GenerationQualifier) {
		return true
	}

	return false
}

// SetGenerationQualifier gets a reference to the given string and assigns it to the GenerationQualifier field.
func (o *UserDTO) SetGenerationQualifier(v string) {
	o.GenerationQualifier = &v
}

// GetGivenName returns the GivenName field value if set, zero value otherwise.
func (o *UserDTO) GetGivenName() string {
	if o == nil || isNil(o.GivenName) {
		var ret string
		return ret
	}
	return *o.GivenName
}

// GetGivenNameOk returns a tuple with the GivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetGivenNameOk() (*string, bool) {
	if o == nil || isNil(o.GivenName) {
    return nil, false
	}
	return o.GivenName, true
}

// HasGivenName returns a boolean if a field has been set.
func (o *UserDTO) HasGivenName() bool {
	if o != nil && !isNil(o.GivenName) {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given string and assigns it to the GivenName field.
func (o *UserDTO) SetGivenName(v string) {
	o.GivenName = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *UserDTO) GetGroups() []GroupDTO {
	if o == nil || isNil(o.Groups) {
		var ret []GroupDTO
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetGroupsOk() ([]GroupDTO, bool) {
	if o == nil || isNil(o.Groups) {
    return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *UserDTO) HasGroups() bool {
	if o != nil && !isNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []GroupDTO and assigns it to the Groups field.
func (o *UserDTO) SetGroups(v []GroupDTO) {
	o.Groups = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserDTO) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserDTO) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserDTO) SetId(v string) {
	o.Id = &v
}

// GetInitials returns the Initials field value if set, zero value otherwise.
func (o *UserDTO) GetInitials() string {
	if o == nil || isNil(o.Initials) {
		var ret string
		return ret
	}
	return *o.Initials
}

// GetInitialsOk returns a tuple with the Initials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetInitialsOk() (*string, bool) {
	if o == nil || isNil(o.Initials) {
    return nil, false
	}
	return o.Initials, true
}

// HasInitials returns a boolean if a field has been set.
func (o *UserDTO) HasInitials() bool {
	if o != nil && !isNil(o.Initials) {
		return true
	}

	return false
}

// SetInitials gets a reference to the given string and assigns it to the Initials field.
func (o *UserDTO) SetInitials(v string) {
	o.Initials = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *UserDTO) GetLanguage() string {
	if o == nil || isNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetLanguageOk() (*string, bool) {
	if o == nil || isNil(o.Language) {
    return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *UserDTO) HasLanguage() bool {
	if o != nil && !isNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *UserDTO) SetLanguage(v string) {
	o.Language = &v
}

// GetLimitSimultaneousLogin returns the LimitSimultaneousLogin field value if set, zero value otherwise.
func (o *UserDTO) GetLimitSimultaneousLogin() bool {
	if o == nil || isNil(o.LimitSimultaneousLogin) {
		var ret bool
		return ret
	}
	return *o.LimitSimultaneousLogin
}

// GetLimitSimultaneousLoginOk returns a tuple with the LimitSimultaneousLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetLimitSimultaneousLoginOk() (*bool, bool) {
	if o == nil || isNil(o.LimitSimultaneousLogin) {
    return nil, false
	}
	return o.LimitSimultaneousLogin, true
}

// HasLimitSimultaneousLogin returns a boolean if a field has been set.
func (o *UserDTO) HasLimitSimultaneousLogin() bool {
	if o != nil && !isNil(o.LimitSimultaneousLogin) {
		return true
	}

	return false
}

// SetLimitSimultaneousLogin gets a reference to the given bool and assigns it to the LimitSimultaneousLogin field.
func (o *UserDTO) SetLimitSimultaneousLogin(v bool) {
	o.LimitSimultaneousLogin = &v
}

// GetLocalityName returns the LocalityName field value if set, zero value otherwise.
func (o *UserDTO) GetLocalityName() string {
	if o == nil || isNil(o.LocalityName) {
		var ret string
		return ret
	}
	return *o.LocalityName
}

// GetLocalityNameOk returns a tuple with the LocalityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetLocalityNameOk() (*string, bool) {
	if o == nil || isNil(o.LocalityName) {
    return nil, false
	}
	return o.LocalityName, true
}

// HasLocalityName returns a boolean if a field has been set.
func (o *UserDTO) HasLocalityName() bool {
	if o != nil && !isNil(o.LocalityName) {
		return true
	}

	return false
}

// SetLocalityName gets a reference to the given string and assigns it to the LocalityName field.
func (o *UserDTO) SetLocalityName(v string) {
	o.LocalityName = &v
}

// GetMaximunLogins returns the MaximunLogins field value if set, zero value otherwise.
func (o *UserDTO) GetMaximunLogins() int32 {
	if o == nil || isNil(o.MaximunLogins) {
		var ret int32
		return ret
	}
	return *o.MaximunLogins
}

// GetMaximunLoginsOk returns a tuple with the MaximunLogins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetMaximunLoginsOk() (*int32, bool) {
	if o == nil || isNil(o.MaximunLogins) {
    return nil, false
	}
	return o.MaximunLogins, true
}

// HasMaximunLogins returns a boolean if a field has been set.
func (o *UserDTO) HasMaximunLogins() bool {
	if o != nil && !isNil(o.MaximunLogins) {
		return true
	}

	return false
}

// SetMaximunLogins gets a reference to the given int32 and assigns it to the MaximunLogins field.
func (o *UserDTO) SetMaximunLogins(v int32) {
	o.MaximunLogins = &v
}

// GetNotifyPasswordExpiration returns the NotifyPasswordExpiration field value if set, zero value otherwise.
func (o *UserDTO) GetNotifyPasswordExpiration() bool {
	if o == nil || isNil(o.NotifyPasswordExpiration) {
		var ret bool
		return ret
	}
	return *o.NotifyPasswordExpiration
}

// GetNotifyPasswordExpirationOk returns a tuple with the NotifyPasswordExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetNotifyPasswordExpirationOk() (*bool, bool) {
	if o == nil || isNil(o.NotifyPasswordExpiration) {
    return nil, false
	}
	return o.NotifyPasswordExpiration, true
}

// HasNotifyPasswordExpiration returns a boolean if a field has been set.
func (o *UserDTO) HasNotifyPasswordExpiration() bool {
	if o != nil && !isNil(o.NotifyPasswordExpiration) {
		return true
	}

	return false
}

// SetNotifyPasswordExpiration gets a reference to the given bool and assigns it to the NotifyPasswordExpiration field.
func (o *UserDTO) SetNotifyPasswordExpiration(v bool) {
	o.NotifyPasswordExpiration = &v
}

// GetOrganizationName returns the OrganizationName field value if set, zero value otherwise.
func (o *UserDTO) GetOrganizationName() string {
	if o == nil || isNil(o.OrganizationName) {
		var ret string
		return ret
	}
	return *o.OrganizationName
}

// GetOrganizationNameOk returns a tuple with the OrganizationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetOrganizationNameOk() (*string, bool) {
	if o == nil || isNil(o.OrganizationName) {
    return nil, false
	}
	return o.OrganizationName, true
}

// HasOrganizationName returns a boolean if a field has been set.
func (o *UserDTO) HasOrganizationName() bool {
	if o != nil && !isNil(o.OrganizationName) {
		return true
	}

	return false
}

// SetOrganizationName gets a reference to the given string and assigns it to the OrganizationName field.
func (o *UserDTO) SetOrganizationName(v string) {
	o.OrganizationName = &v
}

// GetOrganizationUnitName returns the OrganizationUnitName field value if set, zero value otherwise.
func (o *UserDTO) GetOrganizationUnitName() string {
	if o == nil || isNil(o.OrganizationUnitName) {
		var ret string
		return ret
	}
	return *o.OrganizationUnitName
}

// GetOrganizationUnitNameOk returns a tuple with the OrganizationUnitName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetOrganizationUnitNameOk() (*string, bool) {
	if o == nil || isNil(o.OrganizationUnitName) {
    return nil, false
	}
	return o.OrganizationUnitName, true
}

// HasOrganizationUnitName returns a boolean if a field has been set.
func (o *UserDTO) HasOrganizationUnitName() bool {
	if o != nil && !isNil(o.OrganizationUnitName) {
		return true
	}

	return false
}

// SetOrganizationUnitName gets a reference to the given string and assigns it to the OrganizationUnitName field.
func (o *UserDTO) SetOrganizationUnitName(v string) {
	o.OrganizationUnitName = &v
}

// GetPasswordExpirationDate returns the PasswordExpirationDate field value if set, zero value otherwise.
func (o *UserDTO) GetPasswordExpirationDate() time.Time {
	if o == nil || isNil(o.PasswordExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.PasswordExpirationDate
}

// GetPasswordExpirationDateOk returns a tuple with the PasswordExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetPasswordExpirationDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.PasswordExpirationDate) {
    return nil, false
	}
	return o.PasswordExpirationDate, true
}

// HasPasswordExpirationDate returns a boolean if a field has been set.
func (o *UserDTO) HasPasswordExpirationDate() bool {
	if o != nil && !isNil(o.PasswordExpirationDate) {
		return true
	}

	return false
}

// SetPasswordExpirationDate gets a reference to the given time.Time and assigns it to the PasswordExpirationDate field.
func (o *UserDTO) SetPasswordExpirationDate(v time.Time) {
	o.PasswordExpirationDate = &v
}

// GetPersonalTitle returns the PersonalTitle field value if set, zero value otherwise.
func (o *UserDTO) GetPersonalTitle() string {
	if o == nil || isNil(o.PersonalTitle) {
		var ret string
		return ret
	}
	return *o.PersonalTitle
}

// GetPersonalTitleOk returns a tuple with the PersonalTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetPersonalTitleOk() (*string, bool) {
	if o == nil || isNil(o.PersonalTitle) {
    return nil, false
	}
	return o.PersonalTitle, true
}

// HasPersonalTitle returns a boolean if a field has been set.
func (o *UserDTO) HasPersonalTitle() bool {
	if o != nil && !isNil(o.PersonalTitle) {
		return true
	}

	return false
}

// SetPersonalTitle gets a reference to the given string and assigns it to the PersonalTitle field.
func (o *UserDTO) SetPersonalTitle(v string) {
	o.PersonalTitle = &v
}

// GetPostOfficeBox returns the PostOfficeBox field value if set, zero value otherwise.
func (o *UserDTO) GetPostOfficeBox() string {
	if o == nil || isNil(o.PostOfficeBox) {
		var ret string
		return ret
	}
	return *o.PostOfficeBox
}

// GetPostOfficeBoxOk returns a tuple with the PostOfficeBox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetPostOfficeBoxOk() (*string, bool) {
	if o == nil || isNil(o.PostOfficeBox) {
    return nil, false
	}
	return o.PostOfficeBox, true
}

// HasPostOfficeBox returns a boolean if a field has been set.
func (o *UserDTO) HasPostOfficeBox() bool {
	if o != nil && !isNil(o.PostOfficeBox) {
		return true
	}

	return false
}

// SetPostOfficeBox gets a reference to the given string and assigns it to the PostOfficeBox field.
func (o *UserDTO) SetPostOfficeBox(v string) {
	o.PostOfficeBox = &v
}

// GetPostalAddress returns the PostalAddress field value if set, zero value otherwise.
func (o *UserDTO) GetPostalAddress() string {
	if o == nil || isNil(o.PostalAddress) {
		var ret string
		return ret
	}
	return *o.PostalAddress
}

// GetPostalAddressOk returns a tuple with the PostalAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetPostalAddressOk() (*string, bool) {
	if o == nil || isNil(o.PostalAddress) {
    return nil, false
	}
	return o.PostalAddress, true
}

// HasPostalAddress returns a boolean if a field has been set.
func (o *UserDTO) HasPostalAddress() bool {
	if o != nil && !isNil(o.PostalAddress) {
		return true
	}

	return false
}

// SetPostalAddress gets a reference to the given string and assigns it to the PostalAddress field.
func (o *UserDTO) SetPostalAddress(v string) {
	o.PostalAddress = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *UserDTO) GetPostalCode() string {
	if o == nil || isNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetPostalCodeOk() (*string, bool) {
	if o == nil || isNil(o.PostalCode) {
    return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *UserDTO) HasPostalCode() bool {
	if o != nil && !isNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *UserDTO) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetPreventNewSession returns the PreventNewSession field value if set, zero value otherwise.
func (o *UserDTO) GetPreventNewSession() bool {
	if o == nil || isNil(o.PreventNewSession) {
		var ret bool
		return ret
	}
	return *o.PreventNewSession
}

// GetPreventNewSessionOk returns a tuple with the PreventNewSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetPreventNewSessionOk() (*bool, bool) {
	if o == nil || isNil(o.PreventNewSession) {
    return nil, false
	}
	return o.PreventNewSession, true
}

// HasPreventNewSession returns a boolean if a field has been set.
func (o *UserDTO) HasPreventNewSession() bool {
	if o != nil && !isNil(o.PreventNewSession) {
		return true
	}

	return false
}

// SetPreventNewSession gets a reference to the given bool and assigns it to the PreventNewSession field.
func (o *UserDTO) SetPreventNewSession(v bool) {
	o.PreventNewSession = &v
}

// GetStateOrProvinceName returns the StateOrProvinceName field value if set, zero value otherwise.
func (o *UserDTO) GetStateOrProvinceName() string {
	if o == nil || isNil(o.StateOrProvinceName) {
		var ret string
		return ret
	}
	return *o.StateOrProvinceName
}

// GetStateOrProvinceNameOk returns a tuple with the StateOrProvinceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetStateOrProvinceNameOk() (*string, bool) {
	if o == nil || isNil(o.StateOrProvinceName) {
    return nil, false
	}
	return o.StateOrProvinceName, true
}

// HasStateOrProvinceName returns a boolean if a field has been set.
func (o *UserDTO) HasStateOrProvinceName() bool {
	if o != nil && !isNil(o.StateOrProvinceName) {
		return true
	}

	return false
}

// SetStateOrProvinceName gets a reference to the given string and assigns it to the StateOrProvinceName field.
func (o *UserDTO) SetStateOrProvinceName(v string) {
	o.StateOrProvinceName = &v
}

// GetStreetAddress returns the StreetAddress field value if set, zero value otherwise.
func (o *UserDTO) GetStreetAddress() string {
	if o == nil || isNil(o.StreetAddress) {
		var ret string
		return ret
	}
	return *o.StreetAddress
}

// GetStreetAddressOk returns a tuple with the StreetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetStreetAddressOk() (*string, bool) {
	if o == nil || isNil(o.StreetAddress) {
    return nil, false
	}
	return o.StreetAddress, true
}

// HasStreetAddress returns a boolean if a field has been set.
func (o *UserDTO) HasStreetAddress() bool {
	if o != nil && !isNil(o.StreetAddress) {
		return true
	}

	return false
}

// SetStreetAddress gets a reference to the given string and assigns it to the StreetAddress field.
func (o *UserDTO) SetStreetAddress(v string) {
	o.StreetAddress = &v
}

// GetSurename returns the Surename field value if set, zero value otherwise.
func (o *UserDTO) GetSurename() string {
	if o == nil || isNil(o.Surename) {
		var ret string
		return ret
	}
	return *o.Surename
}

// GetSurenameOk returns a tuple with the Surename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetSurenameOk() (*string, bool) {
	if o == nil || isNil(o.Surename) {
    return nil, false
	}
	return o.Surename, true
}

// HasSurename returns a boolean if a field has been set.
func (o *UserDTO) HasSurename() bool {
	if o != nil && !isNil(o.Surename) {
		return true
	}

	return false
}

// SetSurename gets a reference to the given string and assigns it to the Surename field.
func (o *UserDTO) SetSurename(v string) {
	o.Surename = &v
}

// GetTelephoneNumber returns the TelephoneNumber field value if set, zero value otherwise.
func (o *UserDTO) GetTelephoneNumber() string {
	if o == nil || isNil(o.TelephoneNumber) {
		var ret string
		return ret
	}
	return *o.TelephoneNumber
}

// GetTelephoneNumberOk returns a tuple with the TelephoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetTelephoneNumberOk() (*string, bool) {
	if o == nil || isNil(o.TelephoneNumber) {
    return nil, false
	}
	return o.TelephoneNumber, true
}

// HasTelephoneNumber returns a boolean if a field has been set.
func (o *UserDTO) HasTelephoneNumber() bool {
	if o != nil && !isNil(o.TelephoneNumber) {
		return true
	}

	return false
}

// SetTelephoneNumber gets a reference to the given string and assigns it to the TelephoneNumber field.
func (o *UserDTO) SetTelephoneNumber(v string) {
	o.TelephoneNumber = &v
}

// GetTerminatePreviousSession returns the TerminatePreviousSession field value if set, zero value otherwise.
func (o *UserDTO) GetTerminatePreviousSession() bool {
	if o == nil || isNil(o.TerminatePreviousSession) {
		var ret bool
		return ret
	}
	return *o.TerminatePreviousSession
}

// GetTerminatePreviousSessionOk returns a tuple with the TerminatePreviousSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetTerminatePreviousSessionOk() (*bool, bool) {
	if o == nil || isNil(o.TerminatePreviousSession) {
    return nil, false
	}
	return o.TerminatePreviousSession, true
}

// HasTerminatePreviousSession returns a boolean if a field has been set.
func (o *UserDTO) HasTerminatePreviousSession() bool {
	if o != nil && !isNil(o.TerminatePreviousSession) {
		return true
	}

	return false
}

// SetTerminatePreviousSession gets a reference to the given bool and assigns it to the TerminatePreviousSession field.
func (o *UserDTO) SetTerminatePreviousSession(v bool) {
	o.TerminatePreviousSession = &v
}

// GetUserCertificate returns the UserCertificate field value if set, zero value otherwise.
func (o *UserDTO) GetUserCertificate() []string {
	if o == nil || isNil(o.UserCertificate) {
		var ret []string
		return ret
	}
	return o.UserCertificate
}

// GetUserCertificateOk returns a tuple with the UserCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetUserCertificateOk() ([]string, bool) {
	if o == nil || isNil(o.UserCertificate) {
    return nil, false
	}
	return o.UserCertificate, true
}

// HasUserCertificate returns a boolean if a field has been set.
func (o *UserDTO) HasUserCertificate() bool {
	if o != nil && !isNil(o.UserCertificate) {
		return true
	}

	return false
}

// SetUserCertificate gets a reference to the given []string and assigns it to the UserCertificate field.
func (o *UserDTO) SetUserCertificate(v []string) {
	o.UserCertificate = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *UserDTO) GetUserName() string {
	if o == nil || isNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetUserNameOk() (*string, bool) {
	if o == nil || isNil(o.UserName) {
    return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *UserDTO) HasUserName() bool {
	if o != nil && !isNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *UserDTO) SetUserName(v string) {
	o.UserName = &v
}

// GetUserPassword returns the UserPassword field value if set, zero value otherwise.
func (o *UserDTO) GetUserPassword() string {
	if o == nil || isNil(o.UserPassword) {
		var ret string
		return ret
	}
	return *o.UserPassword
}

// GetUserPasswordOk returns a tuple with the UserPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDTO) GetUserPasswordOk() (*string, bool) {
	if o == nil || isNil(o.UserPassword) {
    return nil, false
	}
	return o.UserPassword, true
}

// HasUserPassword returns a boolean if a field has been set.
func (o *UserDTO) HasUserPassword() bool {
	if o != nil && !isNil(o.UserPassword) {
		return true
	}

	return false
}

// SetUserPassword gets a reference to the given string and assigns it to the UserPassword field.
func (o *UserDTO) SetUserPassword(v string) {
	o.UserPassword = &v
}

func (o UserDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AccountDisabled) {
		toSerialize["accountDisabled"] = o.AccountDisabled
	}
	if !isNil(o.AccountExpirationDate) {
		toSerialize["accountExpirationDate"] = o.AccountExpirationDate
	}
	if !isNil(o.AccountExpires) {
		toSerialize["accountExpires"] = o.AccountExpires
	}
	if !isNil(o.AllowUserToChangePassword) {
		toSerialize["allowUserToChangePassword"] = o.AllowUserToChangePassword
	}
	if !isNil(o.AutomaticallyGeneratePassword) {
		toSerialize["automaticallyGeneratePassword"] = o.AutomaticallyGeneratePassword
	}
	if !isNil(o.BusinessCategory) {
		toSerialize["businessCategory"] = o.BusinessCategory
	}
	if !isNil(o.CommonName) {
		toSerialize["commonName"] = o.CommonName
	}
	if !isNil(o.CountryName) {
		toSerialize["countryName"] = o.CountryName
	}
	if !isNil(o.DaysBeforeExpiration) {
		toSerialize["daysBeforeExpiration"] = o.DaysBeforeExpiration
	}
	if !isNil(o.DaysBetweenChanges) {
		toSerialize["daysBetweenChanges"] = o.DaysBetweenChanges
	}
	if !isNil(o.DistinguishedName) {
		toSerialize["distinguishedName"] = o.DistinguishedName
	}
	if !isNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !isNil(o.EmailNewPasword) {
		toSerialize["emailNewPasword"] = o.EmailNewPasword
	}
	if !isNil(o.ExtraAttributes) {
		toSerialize["extraAttributes"] = o.ExtraAttributes
	}
	if !isNil(o.FacsimilTelephoneNumber) {
		toSerialize["facsimilTelephoneNumber"] = o.FacsimilTelephoneNumber
	}
	if !isNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !isNil(o.ForcePeriodicPasswordChanges) {
		toSerialize["forcePeriodicPasswordChanges"] = o.ForcePeriodicPasswordChanges
	}
	if !isNil(o.GenerationQualifier) {
		toSerialize["generationQualifier"] = o.GenerationQualifier
	}
	if !isNil(o.GivenName) {
		toSerialize["givenName"] = o.GivenName
	}
	if !isNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Initials) {
		toSerialize["initials"] = o.Initials
	}
	if !isNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !isNil(o.LimitSimultaneousLogin) {
		toSerialize["limitSimultaneousLogin"] = o.LimitSimultaneousLogin
	}
	if !isNil(o.LocalityName) {
		toSerialize["localityName"] = o.LocalityName
	}
	if !isNil(o.MaximunLogins) {
		toSerialize["maximunLogins"] = o.MaximunLogins
	}
	if !isNil(o.NotifyPasswordExpiration) {
		toSerialize["notifyPasswordExpiration"] = o.NotifyPasswordExpiration
	}
	if !isNil(o.OrganizationName) {
		toSerialize["organizationName"] = o.OrganizationName
	}
	if !isNil(o.OrganizationUnitName) {
		toSerialize["organizationUnitName"] = o.OrganizationUnitName
	}
	if !isNil(o.PasswordExpirationDate) {
		toSerialize["passwordExpirationDate"] = o.PasswordExpirationDate
	}
	if !isNil(o.PersonalTitle) {
		toSerialize["personalTitle"] = o.PersonalTitle
	}
	if !isNil(o.PostOfficeBox) {
		toSerialize["postOfficeBox"] = o.PostOfficeBox
	}
	if !isNil(o.PostalAddress) {
		toSerialize["postalAddress"] = o.PostalAddress
	}
	if !isNil(o.PostalCode) {
		toSerialize["postalCode"] = o.PostalCode
	}
	if !isNil(o.PreventNewSession) {
		toSerialize["preventNewSession"] = o.PreventNewSession
	}
	if !isNil(o.StateOrProvinceName) {
		toSerialize["stateOrProvinceName"] = o.StateOrProvinceName
	}
	if !isNil(o.StreetAddress) {
		toSerialize["streetAddress"] = o.StreetAddress
	}
	if !isNil(o.Surename) {
		toSerialize["surename"] = o.Surename
	}
	if !isNil(o.TelephoneNumber) {
		toSerialize["telephoneNumber"] = o.TelephoneNumber
	}
	if !isNil(o.TerminatePreviousSession) {
		toSerialize["terminatePreviousSession"] = o.TerminatePreviousSession
	}
	if !isNil(o.UserCertificate) {
		toSerialize["userCertificate"] = o.UserCertificate
	}
	if !isNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !isNil(o.UserPassword) {
		toSerialize["userPassword"] = o.UserPassword
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UserDTO) UnmarshalJSON(bytes []byte) (err error) {
	varUserDTO := _UserDTO{}

	if err = json.Unmarshal(bytes, &varUserDTO); err == nil {
		*o = UserDTO(varUserDTO)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "accountDisabled")
		delete(additionalProperties, "accountExpirationDate")
		delete(additionalProperties, "accountExpires")
		delete(additionalProperties, "allowUserToChangePassword")
		delete(additionalProperties, "automaticallyGeneratePassword")
		delete(additionalProperties, "businessCategory")
		delete(additionalProperties, "commonName")
		delete(additionalProperties, "countryName")
		delete(additionalProperties, "daysBeforeExpiration")
		delete(additionalProperties, "daysBetweenChanges")
		delete(additionalProperties, "distinguishedName")
		delete(additionalProperties, "email")
		delete(additionalProperties, "emailNewPasword")
		delete(additionalProperties, "extraAttributes")
		delete(additionalProperties, "facsimilTelephoneNumber")
		delete(additionalProperties, "firstName")
		delete(additionalProperties, "forcePeriodicPasswordChanges")
		delete(additionalProperties, "generationQualifier")
		delete(additionalProperties, "givenName")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "id")
		delete(additionalProperties, "initials")
		delete(additionalProperties, "language")
		delete(additionalProperties, "limitSimultaneousLogin")
		delete(additionalProperties, "localityName")
		delete(additionalProperties, "maximunLogins")
		delete(additionalProperties, "notifyPasswordExpiration")
		delete(additionalProperties, "organizationName")
		delete(additionalProperties, "organizationUnitName")
		delete(additionalProperties, "passwordExpirationDate")
		delete(additionalProperties, "personalTitle")
		delete(additionalProperties, "postOfficeBox")
		delete(additionalProperties, "postalAddress")
		delete(additionalProperties, "postalCode")
		delete(additionalProperties, "preventNewSession")
		delete(additionalProperties, "stateOrProvinceName")
		delete(additionalProperties, "streetAddress")
		delete(additionalProperties, "surename")
		delete(additionalProperties, "telephoneNumber")
		delete(additionalProperties, "terminatePreviousSession")
		delete(additionalProperties, "userCertificate")
		delete(additionalProperties, "userName")
		delete(additionalProperties, "userPassword")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserDTO struct {
	value *UserDTO
	isSet bool
}

func (v NullableUserDTO) Get() *UserDTO {
	return v.value
}

func (v *NullableUserDTO) Set(val *UserDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDTO(val *UserDTO) *NullableUserDTO {
	return &NullableUserDTO{value: val, isSet: true}
}

func (v NullableUserDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


