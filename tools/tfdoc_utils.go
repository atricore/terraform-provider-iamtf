package tools

import (
	"bufio"
	"fmt"
	"os"
)

// Include resource header markdown in each tfdocument
// Receives the resource name and the resource description (markdown string)

const (
	// TF DOCS FOLDER
	TFDOCS_FOLDER    = "./docs"
	TFDOCS_RESOURCES = "/resources"
	BEGIN_GEN_DOC    = "<!-- schema generated by tfplugindocs -->"
)

func TFAddDescToResource(resource_name string, resource_desc string) error {

	fmt.Println("Adding description to resource: " + resource_name)

	fName := TFDOCS_FOLDER + TFDOCS_RESOURCES + "/" + resource_name + ".md"
	fTmpName := TFDOCS_FOLDER + TFDOCS_RESOURCES + "/" + resource_name + ".md.tmp"

	file, err := os.Open(fName)
	if err != nil {
		fmt.Println("error opening file:", err)
		return err
	}
	defer file.Close()

	// Create a temporary file to write the result
	tempFile, err := os.Create(fTmpName)
	if err != nil {
		fmt.Println("error creating temporary file:", err)
		return err
	}
	defer tempFile.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		if err := scanner.Err(); err != nil {
			fmt.Println("error reading file:", err)
			return err
		}
		line := scanner.Text()
		if line == BEGIN_GEN_DOC {
			if _, err := tempFile.WriteString(resource_desc); err != nil {
				fmt.Println("error writing inserted text:", err)
				return err
			}
		}
		if _, err := tempFile.WriteString(line + "\n"); err != nil {
			fmt.Println("error writing line:", err)
			return err
		}

	}

	// Replace the original file with the temporary file
	if err := os.Rename(fTmpName, fName); err != nil {
		fmt.Println("error renaming file:", err)
		return err
	}

	return nil
}
